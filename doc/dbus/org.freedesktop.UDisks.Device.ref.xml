<?xml version="1.0"?><!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="Device">
  <refmeta>
    <refentrytitle role="top_of_page">org.freedesktop.UDisks.Device</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>org.freedesktop.UDisks.Device</refname>
    <refpurpose>Device interface</refpurpose>
  </refnamediv>
  <refsynopsisdiv role="synopsis">
    <title role="synopsis.title">Methods</title>
    <synopsis><link linkend="Device.JobCancel">JobCancel</link>()
<link linkend="Device.PartitionTableCreate">PartitionTableCreate</link>(in's'scheme,
in'as'options)
<link linkend="Device.PartitionDelete">PartitionDelete</link>(in'as'options)
<link linkend="Device.PartitionCreate">PartitionCreate</link>(in't'offset,
in't'size,
in's'type,
in's'label,
in'as'flags,
in'as'options,
in's'fstype,
in'as'fsoptions,
out'o'created_device)
<link linkend="Device.PartitionModify">PartitionModify</link>(in's'type,
in's'label,
in'as'flags)
<link linkend="Device.FilesystemCreate">FilesystemCreate</link>(in's'fstype,
in'as'options)
<link linkend="Device.FilesystemSetLabel">FilesystemSetLabel</link>(in's'new_label)
<link linkend="Device.FilesystemMount">FilesystemMount</link>(in's'filesystem_type,
in'as'options,
out's'mount_path)
<link linkend="Device.FilesystemUnmount">FilesystemUnmount</link>(in'as'options)
<link linkend="Device.FilesystemCheck">FilesystemCheck</link>(in'as'options,
out'b'is_clean)
<link linkend="Device.FilesystemListOpenFiles">FilesystemListOpenFiles</link>(out'a(uus)'processes)
<link linkend="Device.LuksUnlock">LuksUnlock</link>(in's'passphrase,
in'as'options,
out'o'cleartext_device)
<link linkend="Device.LuksLock">LuksLock</link>(in'as'options)
<link linkend="Device.LuksChangePassphrase">LuksChangePassphrase</link>(in's'current_passphrase,
in's'new_passphrase)
<link linkend="Device.LinuxMdAddSpare">LinuxMdAddSpare</link>(in'o'component,
in'as'options)
<link linkend="Device.LinuxMdExpand">LinuxMdExpand</link>(in'ao'components,
in'as'options)
<link linkend="Device.LinuxMdRemoveComponent">LinuxMdRemoveComponent</link>(in'o'component,
in'as'options)
<link linkend="Device.LinuxMdStop">LinuxMdStop</link>(in'as'options)
<link linkend="Device.LinuxLvm2LVStop">LinuxLvm2LVStop</link>(in'as'options)
<link linkend="Device.LinuxMdCheck">LinuxMdCheck</link>(in'as'options,
out't'number_of_errors)
<link linkend="Device.DriveInhibitPolling">DriveInhibitPolling</link>(in'as'options,
out's'cookie)
<link linkend="Device.DriveUninhibitPolling">DriveUninhibitPolling</link>(in's'cookie)
<link linkend="Device.DrivePollMedia">DrivePollMedia</link>()
<link linkend="Device.DriveEject">DriveEject</link>(in'as'options)
<link linkend="Device.DriveDetach">DriveDetach</link>(in'as'options)
<link linkend="Device.DriveSetSpindownTimeout">DriveSetSpindownTimeout</link>(in'i'timeout_seconds,
in'as'options,
out's'cookie)
<link linkend="Device.DriveUnsetSpindownTimeout">DriveUnsetSpindownTimeout</link>(in's'cookie)
<link linkend="Device.DriveAtaSmartRefreshData">DriveAtaSmartRefreshData</link>(in'as'options)
<link linkend="Device.DriveAtaSmartInitiateSelftest">DriveAtaSmartInitiateSelftest</link>(in's'test,
in'as'options)
<link linkend="Device.DriveBenchmark">DriveBenchmark</link>(in'b'do_write_benchmark,
in'as'options,
out'a(td)'read_transfer_rate_results,
out'a(td)'write_transfer_rate_results,
out'a(td)'access_time_results)
</synopsis>
  </refsynopsisdiv>
  <refsect1 role="signal_proto">
    <title role="signal_proto.title">Signals</title>
    <synopsis><link linkend="Device::Changed">Changed</link>()
<link linkend="Device::JobChanged">JobChanged</link>('b'job_in_progress,
'b'job_is_cancellable,
's'job_id,
'u'job_initiated_by_uid,
'd'job_percentage)
</synopsis>
  </refsect1>
  <refsect1 role="impl_interfaces">
    <title role="impl_interfaces.title">Implemented Interfaces</title>
    <para>
    Objects implementing org.freedesktop.UDisks.Device also implements
    org.freedesktop.DBus.Introspectable,
    org.freedesktop.DBus.Properties
    </para>
  </refsect1>
  <refsect1 role="properties">
    <title role="properties.title">Properties</title>
    <synopsis><link linkend="Device:NativePath">'NativePath'</link>read's'
<link linkend="Device:DeviceDetectionTime">'DeviceDetectionTime'</link>read't'
<link linkend="Device:DeviceMediaDetectionTime">'DeviceMediaDetectionTime'</link>read't'
<link linkend="Device:DeviceMajor">'DeviceMajor'</link>read'x'
<link linkend="Device:DeviceMinor">'DeviceMinor'</link>read'x'
<link linkend="Device:DeviceFile">'DeviceFile'</link>read's'
<link linkend="Device:DeviceFilePresentation">'DeviceFilePresentation'</link>read's'
<link linkend="Device:DeviceFileById">'DeviceFileById'</link>read'as'
<link linkend="Device:DeviceFileByPath">'DeviceFileByPath'</link>read'as'
<link linkend="Device:DeviceIsSystemInternal">'DeviceIsSystemInternal'</link>read'b'
<link linkend="Device:DeviceIsPartition">'DeviceIsPartition'</link>read'b'
<link linkend="Device:DeviceIsPartitionTable">'DeviceIsPartitionTable'</link>read'b'
<link linkend="Device:DeviceIsRemovable">'DeviceIsRemovable'</link>read'b'
<link linkend="Device:DeviceIsMediaAvailable">'DeviceIsMediaAvailable'</link>read'b'
<link linkend="Device:DeviceIsMediaChangeDetected">'DeviceIsMediaChangeDetected'</link>read'b'
<link linkend="Device:DeviceIsMediaChangeDetectionPolling">'DeviceIsMediaChangeDetectionPolling'</link>read'b'
<link linkend="Device:DeviceIsMediaChangeDetectionInhibitable">'DeviceIsMediaChangeDetectionInhibitable'</link>read'b'
<link linkend="Device:DeviceIsMediaChangeDetectionInhibited">'DeviceIsMediaChangeDetectionInhibited'</link>read'b'
<link linkend="Device:DeviceIsReadOnly">'DeviceIsReadOnly'</link>read'b'
<link linkend="Device:DeviceIsDrive">'DeviceIsDrive'</link>read'b'
<link linkend="Device:DeviceIsOpticalDisc">'DeviceIsOpticalDisc'</link>read'b'
<link linkend="Device:DeviceIsMounted">'DeviceIsMounted'</link>read'b'
<link linkend="Device:DeviceMountPaths">'DeviceMountPaths'</link>read'as'
<link linkend="Device:DeviceMountedByUid">'DeviceMountedByUid'</link>read'u'
<link linkend="Device:DeviceIsLuks">'DeviceIsLuks'</link>read'b'
<link linkend="Device:DeviceIsLuksCleartext">'DeviceIsLuksCleartext'</link>read'b'
<link linkend="Device:DeviceIsLinuxMdComponent">'DeviceIsLinuxMdComponent'</link>read'b'
<link linkend="Device:DeviceIsLinuxMd">'DeviceIsLinuxMd'</link>read'b'
<link linkend="Device:DeviceIsLinuxLvm2LV">'DeviceIsLinuxLvm2LV'</link>read'b'
<link linkend="Device:DeviceIsLinuxLvm2PV">'DeviceIsLinuxLvm2PV'</link>read'b'
<link linkend="Device:DeviceIsLinuxDmmpComponent">'DeviceIsLinuxDmmpComponent'</link>read'b'
<link linkend="Device:DeviceIsLinuxDmmp">'DeviceIsLinuxDmmp'</link>read'b'
<link linkend="Device:DeviceIsLinuxLoop">'DeviceIsLinuxLoop'</link>read'b'
<link linkend="Device:DeviceSize">'DeviceSize'</link>read't'
<link linkend="Device:DeviceBlockSize">'DeviceBlockSize'</link>read't'
<link linkend="Device:DevicePresentationHide">'DevicePresentationHide'</link>read'b'
<link linkend="Device:DevicePresentationNopolicy">'DevicePresentationNopolicy'</link>read'b'
<link linkend="Device:DevicePresentationName">'DevicePresentationName'</link>read's'
<link linkend="Device:DevicePresentationIconName">'DevicePresentationIconName'</link>read's'
<link linkend="Device:DeviceAutomountHint">'DeviceAutomountHint'</link>read's'
<link linkend="Device:JobInProgress">'JobInProgress'</link>read'b'
<link linkend="Device:JobId">'JobId'</link>read's'
<link linkend="Device:JobInitiatedByUid">'JobInitiatedByUid'</link>read'u'
<link linkend="Device:JobIsCancellable">'JobIsCancellable'</link>read'b'
<link linkend="Device:JobPercentage">'JobPercentage'</link>read'd'
<link linkend="Device:IdUsage">'IdUsage'</link>read's'
<link linkend="Device:IdType">'IdType'</link>read's'
<link linkend="Device:IdVersion">'IdVersion'</link>read's'
<link linkend="Device:IdUuid">'IdUuid'</link>read's'
<link linkend="Device:IdLabel">'IdLabel'</link>read's'
<link linkend="Device:LuksHolder">'LuksHolder'</link>read'o'
<link linkend="Device:LuksCleartextSlave">'LuksCleartextSlave'</link>read'o'
<link linkend="Device:LuksCleartextUnlockedByUid">'LuksCleartextUnlockedByUid'</link>read'u'
<link linkend="Device:PartitionSlave">'PartitionSlave'</link>read'o'
<link linkend="Device:PartitionScheme">'PartitionScheme'</link>read's'
<link linkend="Device:PartitionType">'PartitionType'</link>read's'
<link linkend="Device:PartitionLabel">'PartitionLabel'</link>read's'
<link linkend="Device:PartitionUuid">'PartitionUuid'</link>read's'
<link linkend="Device:PartitionFlags">'PartitionFlags'</link>read'as'
<link linkend="Device:PartitionNumber">'PartitionNumber'</link>read'i'
<link linkend="Device:PartitionOffset">'PartitionOffset'</link>read't'
<link linkend="Device:PartitionSize">'PartitionSize'</link>read't'
<link linkend="Device:PartitionAlignmentOffset">'PartitionAlignmentOffset'</link>read't'
<link linkend="Device:PartitionTableScheme">'PartitionTableScheme'</link>read's'
<link linkend="Device:PartitionTableCount">'PartitionTableCount'</link>read'i'
<link linkend="Device:DriveVendor">'DriveVendor'</link>read's'
<link linkend="Device:DriveModel">'DriveModel'</link>read's'
<link linkend="Device:DriveRevision">'DriveRevision'</link>read's'
<link linkend="Device:DriveSerial">'DriveSerial'</link>read's'
<link linkend="Device:DriveWwn">'DriveWwn'</link>read's'
<link linkend="Device:DriveRotationRate">'DriveRotationRate'</link>read'u'
<link linkend="Device:DriveWriteCache">'DriveWriteCache'</link>read's'
<link linkend="Device:DriveConnectionInterface">'DriveConnectionInterface'</link>read's'
<link linkend="Device:DriveConnectionSpeed">'DriveConnectionSpeed'</link>read't'
<link linkend="Device:DriveMediaCompatibility">'DriveMediaCompatibility'</link>read'as'
<link linkend="Device:DriveMedia">'DriveMedia'</link>read's'
<link linkend="Device:DriveIsMediaEjectable">'DriveIsMediaEjectable'</link>read'b'
<link linkend="Device:DriveCanDetach">'DriveCanDetach'</link>read'b'
<link linkend="Device:DriveCanSpindown">'DriveCanSpindown'</link>read'b'
<link linkend="Device:DriveIsRotational">'DriveIsRotational'</link>read'b'
<link linkend="Device:DriveAdapter">'DriveAdapter'</link>read'o'
<link linkend="Device:DrivePorts">'DrivePorts'</link>read'ao'
<link linkend="Device:DriveSimilarDevices">'DriveSimilarDevices'</link>read'ao'
<link linkend="Device:OpticalDiscIsBlank">'OpticalDiscIsBlank'</link>read'b'
<link linkend="Device:OpticalDiscIsAppendable">'OpticalDiscIsAppendable'</link>read'b'
<link linkend="Device:OpticalDiscIsClosed">'OpticalDiscIsClosed'</link>read'b'
<link linkend="Device:OpticalDiscNumTracks">'OpticalDiscNumTracks'</link>read'u'
<link linkend="Device:OpticalDiscNumAudioTracks">'OpticalDiscNumAudioTracks'</link>read'u'
<link linkend="Device:OpticalDiscNumSessions">'OpticalDiscNumSessions'</link>read'u'
<link linkend="Device:DriveAtaSmartIsAvailable">'DriveAtaSmartIsAvailable'</link>read'b'
<link linkend="Device:DriveAtaSmartTimeCollected">'DriveAtaSmartTimeCollected'</link>read't'
<link linkend="Device:DriveAtaSmartStatus">'DriveAtaSmartStatus'</link>read's'
<link linkend="Device:DriveAtaSmartBlob">'DriveAtaSmartBlob'</link>read'ay'
<link linkend="Device:LinuxMdComponentLevel">'LinuxMdComponentLevel'</link>read's'
<link linkend="Device:LinuxMdComponentPosition">'LinuxMdComponentPosition'</link>read'i'
<link linkend="Device:LinuxMdComponentNumRaidDevices">'LinuxMdComponentNumRaidDevices'</link>read'i'
<link linkend="Device:LinuxMdComponentUuid">'LinuxMdComponentUuid'</link>read's'
<link linkend="Device:LinuxMdComponentName">'LinuxMdComponentName'</link>read's'
<link linkend="Device:LinuxMdComponentHomeHost">'LinuxMdComponentHomeHost'</link>read's'
<link linkend="Device:LinuxMdComponentVersion">'LinuxMdComponentVersion'</link>read's'
<link linkend="Device:LinuxMdComponentHolder">'LinuxMdComponentHolder'</link>read'o'
<link linkend="Device:LinuxMdComponentState">'LinuxMdComponentState'</link>read'as'
<link linkend="Device:LinuxMdState">'LinuxMdState'</link>read's'
<link linkend="Device:LinuxMdLevel">'LinuxMdLevel'</link>read's'
<link linkend="Device:LinuxMdUuid">'LinuxMdUuid'</link>read's'
<link linkend="Device:LinuxMdHomeHost">'LinuxMdHomeHost'</link>read's'
<link linkend="Device:LinuxMdName">'LinuxMdName'</link>read's'
<link linkend="Device:LinuxMdNumRaidDevices">'LinuxMdNumRaidDevices'</link>read'i'
<link linkend="Device:LinuxMdVersion">'LinuxMdVersion'</link>read's'
<link linkend="Device:LinuxMdSlaves">'LinuxMdSlaves'</link>read'ao'
<link linkend="Device:LinuxMdIsDegraded">'LinuxMdIsDegraded'</link>read'b'
<link linkend="Device:LinuxMdSyncAction">'LinuxMdSyncAction'</link>read's'
<link linkend="Device:LinuxMdSyncPercentage">'LinuxMdSyncPercentage'</link>read'd'
<link linkend="Device:LinuxMdSyncSpeed">'LinuxMdSyncSpeed'</link>read't'
<link linkend="Device:LinuxLvm2PVUuid">'LinuxLvm2PVUuid'</link>read's'
<link linkend="Device:LinuxLvm2PVNumMetadataAreas">'LinuxLvm2PVNumMetadataAreas'</link>read'u'
<link linkend="Device:LinuxLvm2PVGroupName">'LinuxLvm2PVGroupName'</link>read's'
<link linkend="Device:LinuxLvm2PVGroupUuid">'LinuxLvm2PVGroupUuid'</link>read's'
<link linkend="Device:LinuxLvm2PVGroupSize">'LinuxLvm2PVGroupSize'</link>read't'
<link linkend="Device:LinuxLvm2PVGroupUnallocatedSize">'LinuxLvm2PVGroupUnallocatedSize'</link>read't'
<link linkend="Device:LinuxLvm2PVGroupSequenceNumber">'LinuxLvm2PVGroupSequenceNumber'</link>read't'
<link linkend="Device:LinuxLvm2PVGroupExtentSize">'LinuxLvm2PVGroupExtentSize'</link>read't'
<link linkend="Device:LinuxLvm2PVGroupPhysicalVolumes">'LinuxLvm2PVGroupPhysicalVolumes'</link>read'as'
<link linkend="Device:LinuxLvm2PVGroupLogicalVolumes">'LinuxLvm2PVGroupLogicalVolumes'</link>read'as'
<link linkend="Device:LinuxLvm2LVName">'LinuxLvm2LVName'</link>read's'
<link linkend="Device:LinuxLvm2LVUuid">'LinuxLvm2LVUuid'</link>read's'
<link linkend="Device:LinuxLvm2LVGroupName">'LinuxLvm2LVGroupName'</link>read's'
<link linkend="Device:LinuxLvm2LVGroupUuid">'LinuxLvm2LVGroupUuid'</link>read's'
<link linkend="Device:LinuxDmmpComponentHolder">'LinuxDmmpComponentHolder'</link>read'o'
<link linkend="Device:LinuxDmmpName">'LinuxDmmpName'</link>read's'
<link linkend="Device:LinuxDmmpSlaves">'LinuxDmmpSlaves'</link>read'ao'
<link linkend="Device:LinuxDmmpParameters">'LinuxDmmpParameters'</link>read's'
<link linkend="Device:LinuxLoopFilename">'LinuxLoopFilename'</link>read's'
</synopsis>
  </refsect1>
  <refsect1 role="desc">
    <title role="desc.title">Description</title>
    <para>
      
        <para>
          This interface provides information about a block device on
          a UNIX-like system. In addition to just providing
          information, methods can be invoked to perform operations on
          the block device. Objects implementing this interface have
          object paths prefixed with <literal>/devices/</literal>
          followed by a sanitized representation of the base name of
          their native path. As the D-Bus specification greatly limits
          what characters can be used in object paths, this doesn't
          necessarily map one to one with the native basename; for
          example the native
          path <literal>/sys/devices/virtual/block/dm-0</literal> will
          be represented as <literal>/devices/dm_0</literal>.
        </para>
        <para>
          Most methods on this interface take an array of strings
          for options that can affect what the method does. Some of
          these options are literal strings (such
          as <literal>noatime</literal>) while some are encoded in the
          form of a key/value pair (such
          as <literal>label=</literal>).
        </para>
        <para>
          A general note about properties: the set of values
          returned can be expected to grow in the future as both
          hardware and operating system capabilities evolve.  Care
          has been taken to namespace values so applications can
          properly fall back (see e.g.
          <link linkend="Device:DriveMediaCompatibility"><literal>DriveMediaCompatibility</literal></link>)
          and export both general and specific properties (such as
          <link linkend="Device:IdUsage"><literal>IdUsage</literal></link>
          vs.
          <link linkend="Device:IdType"><literal>IdType</literal></link>).
          In general an empty string in a property means not
          set. Since the empty string is not a valid object path we
          use the "/" to mean "not set" for object paths.
        </para>
      
    </para>
  </refsect1>
  <refsect1 role="details"><title role="details.title">Details</title><refsect2><title><anchor role="function" id="Device.JobCancel"/>JobCancel ()</title><indexterm><primary>JobCancel</primary><secondary>Device</secondary></indexterm><programlisting>JobCancel ()</programlisting></refsect2>
          <para>
            Cancels a job in progress.
          </para>
        <variablelist role="params"/><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.cancel-job-others: </emphasis>To cancel a job initiated by another user</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.PartitionTableCreate"/>PartitionTableCreate ()</title><indexterm><primary>PartitionTableCreate</primary><secondary>Device</secondary></indexterm><programlisting>PartitionTableCreate (in's'scheme,
in'as'options)</programlisting></refsect2>
          <para>
            Creates a new partition table. The following partition table schemes are supported:
            <para><itemizedlist><listitem><emphasis role="bold">none: </emphasis>To zero out existing partition tables signatures.</listitem><listitem><emphasis role="bold">mbr: </emphasis>
                  Use the
                  <ulink url="http://en.wikipedia.org/wiki/Master_Boot_Record">Master Boot Record</ulink>
                  partitioning scheme.
                </listitem><listitem><emphasis role="bold">gpt: </emphasis>
                  Use the
                  <ulink url="http://en.wikipedia.org/wiki/GUID_Partition_Table">GUID Partition Table</ulink>
                  scheme.
                </listitem><listitem><emphasis role="bold">apm: </emphasis>
                  Use the
                  <ulink url="http://en.wikipedia.org/wiki/Apple_Partition_Map">Apple Partition Map</ulink>
                  partitioning scheme.
                </listitem></itemizedlist></para>
          </para>
        <variablelist role="params"><varlistentry><term><parameter>scheme</parameter>:</term><listitem><simpara>
            The scheme of the partition table to create.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>No options are currently supported.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device or a partition on it are busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.change: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>non-system-internal</literal></link>
                device</listitem><listitem><emphasis role="bold">org.freedesktop.udisks.change-system-internal: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>system-internal</literal></link>
                device</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.PartitionDelete"/>PartitionDelete ()</title><indexterm><primary>PartitionDelete</primary><secondary>Device</secondary></indexterm><programlisting>PartitionDelete (in'as'options)</programlisting></refsect2>
          <para>
            Deletes a partition, removing it from the enclosing partition table.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>No options are currently supported.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.change: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>non-system-internal</literal></link>
                device</listitem><listitem><emphasis role="bold">org.freedesktop.udisks.change-system-internal: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>system-internal</literal></link>
                device</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.PartitionCreate"/>PartitionCreate ()</title><indexterm><primary>PartitionCreate</primary><secondary>Device</secondary></indexterm><programlisting>PartitionCreate (in't'offset,
in't'size,
in's'type,
in's'label,
in'as'flags,
in'as'options,
in's'fstype,
in'as'fsoptions,
out'o'created_device)</programlisting></refsect2>
          <para>
            Create a new partition and, optionally, create a file
            system on it. The partition won't necessarily be created
            at the exact location requested due to disk geometry
            constraints.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>offset</parameter>:</term><listitem><simpara>Where on the device to create the partition.</simpara></listitem></varlistentry><varlistentry><term><parameter>size</parameter>:</term><listitem><simpara>Size of the partitition to create.</simpara></listitem></varlistentry><varlistentry><term><parameter>type</parameter>:</term><listitem><simpara>
            The type of the partition to create. Valid types depends
            on the partitioning scheme used:
            <para><itemizedlist><listitem><emphasis role="bold">mbr: </emphasis>
                  For the
                  <ulink url="http://en.wikipedia.org/wiki/Master_Boot_Record">Master Boot Record</ulink>
                  partitioning scheme, the
                  given type must be a string representation of an
                  integer (both decimal and hexadecimal encodings are
                  accepted) between 0 and 255 both inclusive.
                </listitem><listitem><emphasis role="bold">gpt: </emphasis>
                  Any valid GUID string.
                </listitem><listitem><emphasis role="bold">apm: </emphasis>
                  Any valid type for
                  <ulink url="http://en.wikipedia.org/wiki/Apple_Partition_Map">Apple Partition Map</ulink>
                  for example <literal>Apple_Unix_SVR2</literal>.
                </listitem></itemizedlist></para>
        </simpara></listitem></varlistentry><varlistentry><term><parameter>label</parameter>:</term><listitem><simpara>
            The label to use for the partition. Leave blank if the
            partition table scheme is <literal>mbr</literal>.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>flags</parameter>:</term><listitem><simpara>
            Flags to use for the partition. Valid flags depends on the
            partitioning scheme used:
            <para><itemizedlist><listitem><emphasis role="bold">mbr: </emphasis>
                  Only the flag <literal>boot</literal> is valid.
                </listitem><listitem><emphasis role="bold">gpt: </emphasis>
                  Only the flag <literal>required</literal> is valid.
                </listitem><listitem><emphasis role="bold">apm: </emphasis>
                  The flags
                  <literal>allocated</literal>,
                  <literal>in_use</literal>,
                  <literal>boot</literal>,
                  <literal>allow_read</literal>,
                  <literal>allow_write</literal>,
                  <literal>boot_code_is_pic</literal>
                  are valid.
                </listitem></itemizedlist></para>
        </simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Currently unused.</simpara></listitem></varlistentry><varlistentry><term><parameter>fstype</parameter>:</term><listitem><simpara>
            The file system to create in new partition. Leave
            blank to skip creating a file system. See the
            <link linkend="Device.FilesystemCreate"><function>FilesystemCreate()</function></link> method
            for details.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>fsoptions</parameter>:</term><listitem><simpara>
            Options to use for file system creation. See the
            <link linkend="Device.FilesystemCreate"><function>FilesystemCreate()</function></link> method
            for details.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>created_device</parameter>:</term><listitem><simpara>The object path of the newly added partition.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.change: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>non-system-internal</literal></link>
                device</listitem><listitem><emphasis role="bold">org.freedesktop.udisks.change-system-internal: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>system-internal</literal></link>
                device</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.PartitionModify"/>PartitionModify ()</title><indexterm><primary>PartitionModify</primary><secondary>Device</secondary></indexterm><programlisting>PartitionModify (in's'type,
in's'label,
in'as'flags)</programlisting></refsect2>
          <para>
            Modifies meta data for a partition, such as type, label and flags.
            TODO: Consider allowing changing offset and
            size. Or maybe that should be a separate method.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>type</parameter>:</term><listitem><simpara>
            The type of the partition to create. See the <literal>type</literal> parameter of the
            <link linkend="Device.PartitionCreate"><function>PartitionCreate()</function></link> method
            for details on valid types.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>label</parameter>:</term><listitem><simpara>
            The label to use for the partition. See the <literal>label</literal> parameter of the
            <link linkend="Device.PartitionCreate"><function>PartitionCreate()</function></link> method
            for details on valid labels.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>flags</parameter>:</term><listitem><simpara>
            Flags to use for the partition. See the <literal>flags</literal> parameter of the
            <link linkend="Device.PartitionCreate"><function>PartitionCreate()</function></link> method
            for details on valid flags
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the enclosing partition table device is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.change: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>non-system-internal</literal></link>
                device</listitem><listitem><emphasis role="bold">org.freedesktop.udisks.change-system-internal: </emphasis>If the operation is on a
                <link linkend="Device:device-is-system-internal"><literal>system-internal</literal></link>
                device</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.FilesystemCreate"/>FilesystemCreate ()</title><indexterm><primary>FilesystemCreate</primary><secondary>Device</secondary></indexterm><programlisting>FilesystemCreate (in's'fstype,
in'as'options)</programlisting></refsect2>
          <para>
            Create a file system on a device. If
            the <literal>luks_encrypt=</literal> option is passed then an
            LUKS encrypted block device will be created, then unlocked and
            the file system will be created on the corresponding
            cleartext device.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>fstype</parameter>:</term><listitem><simpara>
            The type of file system to
            create. Pass <literal>empty</literal> to not create a file
            system and just clear the areas of the device known to host
            file system signatures. Use @TODO@ to get a list of file systems that can
            be created.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>
            To set the label on the file system use
            the <literal>label=NAME</literal> option. Labels may not be
            supported for all file systems and the allowed length of a
            label may vary (see @TODO@).  To create the file system on
            an LUKS encrypted block device, pass
            the <literal>luks_encrypt=</literal> option with the value
            set to the passphrase to use. For file systems with the
            concept of owners (e.g.
            <literal>ext3</literal>), the options <literal>take_ownership_uid=</literal> and
            <literal>take_ownership_gid=</literal> are supported and can be used to set the
            initial owner of the created file system.
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.FilesystemToolsMissing</parameter>:</term><listitem><simpara>if mkfs for this type is not available</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.change: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>non-system-internal</literal></link>
                device</listitem><listitem><emphasis role="bold">org.freedesktop.udisks.change-system-internal: </emphasis>If the operation is on a
                <link linkend="Device:device-is-system-internal"><literal>system-internal</literal></link>
                device</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.FilesystemSetLabel"/>FilesystemSetLabel ()</title><indexterm><primary>FilesystemSetLabel</primary><secondary>Device</secondary></indexterm><programlisting>FilesystemSetLabel (in's'new_label)</programlisting></refsect2>
          <para>
            Changes the file system label. See the <literal>options</literal> parameter of
            <link linkend="Device.FilesystemCreate"><function>FilesystemCreate()</function></link>
            method for details of what valid labels are valid.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>new_label</parameter>:</term><listitem><simpara>
            New label for file system.
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is busy and changing the label requires an unmounted file system</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.FilesystemToolsMissing</parameter>:</term><listitem><simpara>if the label changing tool for this file system type is not available</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.change: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>non-system-internal</literal></link>
                device</listitem><listitem><emphasis role="bold">org.freedesktop.udisks.change-system-internal: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>system-internal</literal></link>
                device</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.FilesystemMount"/>FilesystemMount ()</title><indexterm><primary>FilesystemMount</primary><secondary>Device</secondary></indexterm><programlisting>FilesystemMount (in's'filesystem_type,
in'as'options,
out's'mount_path)</programlisting></refsect2>
          <para>
            Mount the device. If the device is referenced in the
            system-wide <literal>/etc/fstab</literal> file, the given
            parameters are all ignored and the device will be
            attempted to be mounted as the calling user.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filesystem_type</parameter>:</term><listitem><simpara>File system type to use.</simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>
            Mount Options. Valid mount options include mount options accepted by the native mount program.
            The option auth_no_user_interaction can be used to avoid user interaction (e.g. authentication dialogs) when checking whether the caller is authorized.</simpara></listitem></varlistentry><varlistentry><term><parameter>mount_path</parameter>:</term><listitem><simpara>Where the device was mounted.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.InvalidOption</parameter>:</term><listitem><simpara>if an invalid or malformed mount option was given</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.FilesystemDriverMissing</parameter>:</term><listitem><simpara>if the kernel driver for this file system type is not available</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.filesystem-mount: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>non-system-internal</literal></link>
                device</listitem><listitem><emphasis role="bold">org.freedesktop.udisks.filesystem-mount-system-internal: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>system-internal</literal></link>
                device</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.FilesystemUnmount"/>FilesystemUnmount ()</title><indexterm><primary>FilesystemUnmount</primary><secondary>Device</secondary></indexterm><programlisting>FilesystemUnmount (in'as'options)</programlisting></refsect2>
          <para>
            Unmount the device. If the device is referenced in the
            system-wide <literal>/etc/fstab</literal> file (both at
            mount time and when this method is invoked), the device
            will be attempted to be unmounted as the calling user.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Unmount options. Valid options currently include only 'force'.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.InvalidOption</parameter>:</term><listitem><simpara>if an invalid or malformed unmount option was given</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.filesystem-unmount-others: </emphasis>To unmount a device mounted by another user</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.FilesystemCheck"/>FilesystemCheck ()</title><indexterm><primary>FilesystemCheck</primary><secondary>Device</secondary></indexterm><programlisting>FilesystemCheck (in'as'options,
out'b'is_clean)</programlisting></refsect2>
          <para>
            Perform a non-interactive file system check.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Currently unused.</simpara></listitem></varlistentry><varlistentry><term><parameter>is_clean</parameter>:</term><listitem><simpara>
            Returns TRUE if the file system is clean, FALSE if there are errors on the file system.
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is mounted and the file system doesn't support online file system checking. See TODO for how to determine if a file system supports online fsck</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.filesystem-check: </emphasis>To check a file system on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>non-system-internal</literal></link>
                device.</listitem><listitem><emphasis role="bold">org.freedesktop.udisks.filesystem-check-system-internal: </emphasis>To check a file system on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>system-internal</literal></link>
                device.</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.FilesystemListOpenFiles"/>FilesystemListOpenFiles ()</title><indexterm><primary>FilesystemListOpenFiles</primary><secondary>Device</secondary></indexterm><programlisting>FilesystemListOpenFiles (out'a(uus)'processes)</programlisting></refsect2>
          <para>
            List open files on a mounted file system.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>processes</parameter>:</term><listitem><simpara>
            An array of triples (<literal>pid</literal>, <literal>uid</literal>, command line for the process
            image) for processes currently having open files on the given mounted file system.
            Note that this operation is not run as a job.
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is mounted and the file system doesn't support online file system checking. See TODO for how to determine if a file system supports online fsck</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.filesystem-lsof: </emphasis>To check a file system on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>non-system-internal</literal></link>
                device.</listitem><listitem><emphasis role="bold">org.freedesktop.udisks.filesystem-lsof-system-internal: </emphasis>To check a file system on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>system-internal</literal></link>
                device.</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.LuksUnlock"/>LuksUnlock ()</title><indexterm><primary>LuksUnlock</primary><secondary>Device</secondary></indexterm><programlisting>LuksUnlock (in's'passphrase,
in'as'options,
out'o'cleartext_device)</programlisting></refsect2>
          <para>
            Sets up a cleartext device using the given device as backing store.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>passphrase</parameter>:</term><listitem><simpara>Passphrase for unlocking the cleartext data.</simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Currently unused.</simpara></listitem></varlistentry><varlistentry><term><parameter>cleartext_device</parameter>:</term><listitem><simpara>The cleartext device created.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.luks-unlock: </emphasis>To unlock LUKS encrypted devices</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.LuksLock"/>LuksLock ()</title><indexterm><primary>LuksLock</primary><secondary>Device</secondary></indexterm><programlisting>LuksLock (in'as'options)</programlisting></refsect2>
          <para>
            Tears down the cleartext device set up using
            e.g. the <link linkend="Device.LuksUnlock"><function>LuksUnlock()</function></link>
            method.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Currently unused.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.luks-lock-others: </emphasis>To lock an encrypted LUKS device unlocked by another user</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.LuksChangePassphrase"/>LuksChangePassphrase ()</title><indexterm><primary>LuksChangePassphrase</primary><secondary>Device</secondary></indexterm><programlisting>LuksChangePassphrase (in's'current_passphrase,
in's'new_passphrase)</programlisting></refsect2>
          <para>
            Change the passphrase used to unlock a LUKS encrypted device.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>current_passphrase</parameter>:</term><listitem><simpara>The current passphrase.</simpara></listitem></varlistentry><varlistentry><term><parameter>new_passphrase</parameter>:</term><listitem><simpara>The new passphrase.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.change: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>non-system-internal</literal></link>
                device</listitem><listitem><emphasis role="bold">org.freedesktop.udisks.change-system-internal: </emphasis>If the operation is on a
                <link linkend="Device:DeviceIsSystemInternal"><literal>system-internal</literal></link>
                device</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.LinuxMdAddSpare"/>LinuxMdAddSpare ()</title><indexterm><primary>LinuxMdAddSpare</primary><secondary>Device</secondary></indexterm><programlisting>LinuxMdAddSpare (in'o'component,
in'as'options)</programlisting></refsect2>
          <para>
            Adds a component to a Linux md RAID array. Existing data
            on the given component will be erased.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>component</parameter>:</term><listitem><simpara>Object path of the component to add</simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Currently unused.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>component to add is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need the following PolicyKit authorization:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.linux-md: </emphasis>
                Needed to configured Linux md Software RAID devices.
              </listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.LinuxMdExpand"/>LinuxMdExpand ()</title><indexterm><primary>LinuxMdExpand</primary><secondary>Device</secondary></indexterm><programlisting>LinuxMdExpand (in'ao'components,
in'as'options)</programlisting></refsect2>
          <para>
            Grows the Linux md RAID array with the given components.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>components</parameter>:</term><listitem><simpara>Object paths of the components to use for growing the array</simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Currently unused.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>component to add is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need the following PolicyKit authorization:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.linux-md: </emphasis>
                Needed to configured Linux md Software RAID devices.
              </listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.LinuxMdRemoveComponent"/>LinuxMdRemoveComponent ()</title><indexterm><primary>LinuxMdRemoveComponent</primary><secondary>Device</secondary></indexterm><programlisting>LinuxMdRemoveComponent (in'o'component,
in'as'options)</programlisting></refsect2>
          <para>
            Removes a component from a Linux md RAID array. The component
            will be removed and then the signatures on the component will be
            scrubbed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>component</parameter>:</term><listitem><simpara>The component to remove from the array.</simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>No options are currently supported.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>component to add is busy</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need the following PolicyKit authorization:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.linux-md: </emphasis>
                Needed to configured Linux md Software RAID devices.
              </listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.LinuxMdStop"/>LinuxMdStop ()</title><indexterm><primary>LinuxMdStop</primary><secondary>Device</secondary></indexterm><programlisting>LinuxMdStop (in'as'options)</programlisting></refsect2>
          <para>
            Stops a Linux md RAID array.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Currently unused.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need the following PolicyKit authorization:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.linux-md: </emphasis>
                Needed to configured Linux md Software RAID devices.
              </listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.LinuxLvm2LVStop"/>LinuxLvm2LVStop ()</title><indexterm><primary>LinuxLvm2LVStop</primary><secondary>Device</secondary></indexterm><programlisting>LinuxLvm2LVStop (in'as'options)</programlisting></refsect2>
          <para>
            Stops a Linux LVM2 Logical Volume.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Currently unused.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need the following PolicyKit authorization:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.linux-lvm2: </emphasis>
                Needed to configured Linux LVM2.
              </listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.LinuxMdCheck"/>LinuxMdCheck ()</title><indexterm><primary>LinuxMdCheck</primary><secondary>Device</secondary></indexterm><programlisting>LinuxMdCheck (in'as'options,
out't'number_of_errors)</programlisting></refsect2>
          <para>
            Checks a Linux md RAID array and returns the number of
            sectors/page with errors found/fixed. This can only be done if the
            property
            <link linkend="Device:LinuxMdSyncAction"><literal>LinuxMdSyncAction</literal></link>
            is idle.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>
            Use the <literal>repair</literal> option to fix any problems encountered.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>number_of_errors</parameter>:</term><listitem><simpara>
            Number of mismatched sectors/pages found (or fixed if the <literal>repair</literal> option is used).
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need the following PolicyKit authorization:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.linux-md: </emphasis>
                Needed to configured Linux md Software RAID devices.
              </listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.DriveInhibitPolling"/>DriveInhibitPolling ()</title><indexterm><primary>DriveInhibitPolling</primary><secondary>Device</secondary></indexterm><programlisting>DriveInhibitPolling (in'as'options,
out's'cookie)</programlisting></refsect2>
          <para>
            Inhibits the daemon from polling the device for media changes.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Inhibit options. Currently no options are recognized.</simpara></listitem></varlistentry><varlistentry><term><parameter>cookie</parameter>:</term><listitem><simpara>
            A cookie that can be used in the
            <link linkend="Device.DriveUninhibitPolling"><function>DriveUninhibitPolling()</function></link> method
            to stop inhibiting polling of the device.
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.inhibit-polling: </emphasis>To inhibit polling</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.DriveUninhibitPolling"/>DriveUninhibitPolling ()</title><indexterm><primary>DriveUninhibitPolling</primary><secondary>Device</secondary></indexterm><programlisting>DriveUninhibitPolling (in's'cookie)</programlisting></refsect2>
          <para>
            Uninhibits daemon from polling the device for media changes.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>cookie</parameter>:</term><listitem><simpara>
            A cookie obtained from the
            <link linkend="Device.DriveInhibitPolling"><function>DriveInhibitPolling()</function></link> method.
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the given cookie is malformed</simpara></listitem></varlistentry></variablelist></refsect3><refsect2><title><anchor role="function" id="Device.DrivePollMedia"/>DrivePollMedia ()</title><indexterm><primary>DrivePollMedia</primary><secondary>Device</secondary></indexterm><programlisting>DrivePollMedia ()</programlisting></refsect2>
          <para>
            Polls the drive for media. This is typically only useful when the
            <link linkend="Device:DeviceIsMediaChangeDetected"><literal>DeviceIsMediaChangeDetected</literal></link> property
            is FALSE.
          </para>
        <variablelist role="params"/><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.inhibit-polling: </emphasis>To inhibit polling</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.DriveEject"/>DriveEject ()</title><indexterm><primary>DriveEject</primary><secondary>Device</secondary></indexterm><programlisting>DriveEject (in'as'options)</programlisting></refsect2>
          <para>
            Ejects media from the device. If the unmount option is given, the device might have mounted file systems, which will be unmounted before ejection.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Eject options. Valid options currently include only 'unmount'.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device or a dependent device (e.g. partition or cleartext luks device) is busy (e.g. mounted)</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.InvalidOption</parameter>:</term><listitem><simpara>if an invalid or malformed option was given</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.drive-eject: </emphasis>To eject media from a device</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.DriveDetach"/>DriveDetach ()</title><indexterm><primary>DriveDetach</primary><secondary>Device</secondary></indexterm><programlisting>DriveDetach (in'as'options)</programlisting></refsect2>
          <para>
            Detachs the device by e.g. powering down the physical port
            it is connected to. Note that not all devices or ports are
            capable of this. Check the
            <link linkend="Device:DriveCanDetach"><literal>DriveCanDetach</literal></link>
            property before attempting to invoke this method.
          </para>
          <para>
            Note that the physical port a drive belongs to may be
            located inside the physical casing - for example, some
            netbooks provide a SD card drive connect through USB. As
            such, users of this method should be careful – don't
            automatically invoke this method if the user presses
            e.g. an Eject button in the UI. Instead, provide e.g. a
            "Safely Remove Drive" option.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Detach options. Currently no options are recognized.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Busy</parameter>:</term><listitem><simpara>if the device or a dependent device (e.g. partition or cleartext luks device) is busy (e.g. mounted)</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.InvalidOption</parameter>:</term><listitem><simpara>if an invalid or malformed option was given</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.drive-detach: </emphasis>To detach a device</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.DriveSetSpindownTimeout"/>DriveSetSpindownTimeout ()</title><indexterm><primary>DriveSetSpindownTimeout</primary><secondary>Device</secondary></indexterm><programlisting>DriveSetSpindownTimeout (in'i'timeout_seconds,
in'as'options,
out's'cookie)</programlisting></refsect2>
          <para>
            Configures spindown timeout for the drive.
            Check the
            <link linkend="Device:DriveCanSpindown"><literal>DriveCanSpindown</literal></link>
            property before attempting to invoke this method.
            Caution should be exercised when using this method, see
            the SPINNING DOWN DISKS section in the
            udisks<literal>(1)</literal> man page before using it.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>timeout_seconds</parameter>:</term><listitem><simpara>
            Number of seconds before the drive should be spun down.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>
            Options related to setting spindown timeout. Currently no options are recognized.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>cookie</parameter>:</term><listitem><simpara>
            A cookie that can be used in the
            <link linkend="Device.DriveUnsetSpindownTimeout"><function>DriveUnsetSpindownTimeout()</function></link> method
            to unset the spindown timeout of the device.
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.InvalidOption</parameter>:</term><listitem><simpara>if an invalid or malformed option was given</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.drive-set-spindown: </emphasis>To set spindown timeouts</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.DriveUnsetSpindownTimeout"/>DriveUnsetSpindownTimeout ()</title><indexterm><primary>DriveUnsetSpindownTimeout</primary><secondary>Device</secondary></indexterm><programlisting>DriveUnsetSpindownTimeout (in's'cookie)</programlisting></refsect2>
          <para>
            Unsets spindown timeout for the drive.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>cookie</parameter>:</term><listitem><simpara>
            A cookie obtained from the
            <link linkend="Device.DriveSetSpindownTimeout"><function>DriveSetSpindownTimeout()</function></link> method.
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.drive-set-spindown: </emphasis>To set spindown timeouts</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.DriveAtaSmartRefreshData"/>DriveAtaSmartRefreshData ()</title><indexterm><primary>DriveAtaSmartRefreshData</primary><secondary>Device</secondary></indexterm><programlisting>DriveAtaSmartRefreshData (in'as'options)</programlisting></refsect2>
          <para>
            Refreshes the
            <ulink url="http://en.wikipedia.org/wiki/S.M.A.R.T">ATA SMART</ulink>
            data for the given drive. Note that this operation is not run as a job.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>
            The option <literal>nowakeup</literal> can be passed to
            avoid spinning up the disk if it's in a low-power mode.
            The option <literal>simulate=</literal> can be used to pass a path to
            a blob with libatasmart data to use instead of reading it from the disk.
            The <literal>simulate=</literal> option can only be used by the super user.
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.AtaSmartWouldWakeup</parameter>:</term><listitem><simpara>If the disk is sleeping and the <literal>nowakeup</literal> option was passed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.drive-ata-smart-refresh: </emphasis>Needed to refresh ATA SMART data</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.DriveAtaSmartInitiateSelftest"/>DriveAtaSmartInitiateSelftest ()</title><indexterm><primary>DriveAtaSmartInitiateSelftest</primary><secondary>Device</secondary></indexterm><programlisting>DriveAtaSmartInitiateSelftest (in's'test,
in'as'options)</programlisting></refsect2>
          <para>
            Runs a ATA SMART self test on the drive.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>test</parameter>:</term><listitem><simpara>
            The name of the test to run; supported values are 'short'
            (usually less than ten minutes), 'extended' (usually tens
            of minutes) and 'conveyance' (usually a few minutes).
        </simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Currently unused.</simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.drive-ata-smart-selftest: </emphasis>Needed to run ATA SMART self tests</listitem></itemizedlist></para>
        </para></refsect3><refsect2><title><anchor role="function" id="Device.DriveBenchmark"/>DriveBenchmark ()</title><indexterm><primary>DriveBenchmark</primary><secondary>Device</secondary></indexterm><programlisting>DriveBenchmark (in'b'do_write_benchmark,
in'as'options,
out'a(td)'read_transfer_rate_results,
out'a(td)'write_transfer_rate_results,
out'a(td)'access_time_results)</programlisting></refsect2>
          <para>
            Benchmarks the drive.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>do_write_benchmark</parameter>:</term><listitem><simpara>
            If TRUE, write performance will be benchmarked in addition
            to read performance. Note that benchmarking write performance
            will scribble zeros in various parts of the drive and can
            only be used on a drive where the contents are completely
            unrecognized (e.g. no partition table and device). Use
            this option with caution.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>options</parameter>:</term><listitem><simpara>Currently unused.</simpara></listitem></varlistentry><varlistentry><term><parameter>read_transfer_rate_results</parameter>:</term><listitem><simpara>
            An array of pairs where the first element is the offset
            and the second element is the measured read transfer rate
            (in bytes/sec) at the given offset.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>write_transfer_rate_results</parameter>:</term><listitem><simpara>
            An array of pairs where the first element is the offset
            and the second element is the measured read transfer rate
            (in bytes/sec) at the given offset.
            This is an empty array unless write benchmarking has been
            requested.
        </simpara></listitem></varlistentry><varlistentry><term><parameter>access_time_results</parameter>:</term><listitem><simpara>
            An array of pairs where the first element is the offset
            and the second element the amount of time (in seconds) it
            took to seek to the position.
        </simpara></listitem></varlistentry></variablelist><refsect3><title>Errors</title><variablelist role="errors"><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.NotAuthorized</parameter>:</term><listitem><simpara>if the caller lacks the appropriate PolicyKit authorization</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Failed</parameter>:</term><listitem><simpara>if the operation failed</simpara></listitem></varlistentry><varlistentry><term><parameter>org.freedesktop.PolicyKit.Error.Cancelled</parameter>:</term><listitem><simpara>if the job was cancelled</simpara></listitem></varlistentry></variablelist></refsect3><refsect3><title>Permissions</title><para role="permission">
          The caller will need one of the following PolicyKit authorizations:
          <para><itemizedlist><listitem><emphasis role="bold">org.freedesktop.udisks.change: </emphasis>Needed to run benchmarks</listitem></itemizedlist></para>
        </para></refsect3></refsect1>
  <refsect1 role="signals"><title role="signals.title">Signal Details</title><refsect2><title><anchor role="function" id="Device::Changed"/>The Changed signal</title><indexterm><primary>Changed</primary><secondary>Device</secondary></indexterm><programlisting>Changed ()</programlisting></refsect2>
          <para>
            Something on the device changed. Changes in job state wont
            trigger this signal; see the <link linkend="Device::JobChanged"><literal>JobChanged()</literal></link> signal.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Device::JobChanged"/>The JobChanged signal</title><indexterm><primary>JobChanged</primary><secondary>Device</secondary></indexterm><programlisting>JobChanged ('b'job_in_progress,
'b'job_is_cancellable,
's'job_id,
'u'job_initiated_by_uid,
'd'job_percentage)</programlisting></refsect2>
          <para>
            Emitted when a job on a device changes. Clients should
            listen to this signal to avoid polling the daemon for job
            state.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>job_in_progress</parameter>:</term><listitem><simpara>Whether a job is currently in progress.</simpara></listitem></varlistentry><varlistentry><term><parameter>job_is_cancellable</parameter>:</term><listitem><simpara>Whether the job is cancellable.</simpara></listitem></varlistentry><varlistentry><term><parameter>job_id</parameter>:</term><listitem><simpara>The identifier of the job.</simpara></listitem></varlistentry><varlistentry><term><parameter>job_initiated_by_uid</parameter>:</term><listitem><simpara>The UNIX user id of the user who initiated the job.</simpara></listitem></varlistentry><varlistentry><term><parameter>job_percentage</parameter>:</term><listitem><simpara>Percentage completed of the job (between 0 and 100, negative if unknown).</simpara></listitem></varlistentry></variablelist></refsect1>
  <refsect1 role="property_details">
    <title role="property_details.title">Property Details</title>
    <refsect2>
      <title><anchor role="function" id="Device:NativePath"/>The "NativePath" property</title>
      <indexterm>
        <primary>NativePath</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'NativePath'read's'
</programlisting>
    </refsect2>
    <para>
            OS specific native path of the device. On Linux this is the sysfs path, for example <literal>/sys/devices/pci0000:00/0000:00:1f.2/host2/target2:0:1/2:0:1:0/block/sda</literal>.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceDetectionTime"/>The "DeviceDetectionTime" property</title>
      <indexterm>
        <primary>DeviceDetectionTime</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceDetectionTime'read't'
</programlisting>
    </refsect2>
    <para>
            The point in time (seconds since the Epoch Jan 1, 1970 0:00 UTC) when the device
            was detected by the daemon.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceMediaDetectionTime"/>The "DeviceMediaDetectionTime" property</title>
      <indexterm>
        <primary>DeviceMediaDetectionTime</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceMediaDetectionTime'read't'
</programlisting>
    </refsect2>
    <para>
            The point in time (seconds since the Epoch Jan 1, 1970 0:00 UTC) when the
            media currently in the device was detected by the daemon or 0 if the
            device has no media.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceMajor"/>The "DeviceMajor" property</title>
      <indexterm>
        <primary>DeviceMajor</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceMajor'read'x'
</programlisting>
    </refsect2>
    <para>
            Major for the device or -1 if not set.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceMinor"/>The "DeviceMinor" property</title>
      <indexterm>
        <primary>DeviceMinor</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceMinor'read'x'
</programlisting>
    </refsect2>
    <para>
            Major for the device or -1 if not set.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceFile"/>The "DeviceFile" property</title>
      <indexterm>
        <primary>DeviceFile</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceFile'read's'
</programlisting>
    </refsect2>
    <para>
            UNIX special device file for device. Example: <literal>/dev/sda</literal>.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceFilePresentation"/>The "DeviceFilePresentation" property</title>
      <indexterm>
        <primary>DeviceFilePresentation</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceFilePresentation'read's'
</programlisting>
    </refsect2>
    <para>
            Either the value of the
            <link linkend="Device:DeviceFile"><literal>DeviceFile</literal></link>
            property, otherwise the preferred device file (typically a symlink to the value of the
            <link linkend="Device:DeviceFile"><literal>DeviceFile</literal></link>
            property) to present in user interface.
            Example: <literal>/dev/mapper/mpathb</literal> or
            <literal>/dev/vg_phobos/lv_root</literal>.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceFileById"/>The "DeviceFileById" property</title>
      <indexterm>
        <primary>DeviceFileById</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceFileById'read'as'
</programlisting>
    </refsect2>
    <para>
            Symlinks to UNIX special device file that are stable and uniquely identifies the device.
            Example: <literal>/dev/disk/by-id/scsi-SATA_ST910021AS_3MH05AVA</literal>,
            <literal>/dev/disk/by-id/ata-ST910021AS_3MH05AVA</literal>.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceFileByPath"/>The "DeviceFileByPath" property</title>
      <indexterm>
        <primary>DeviceFileByPath</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceFileByPath'read'as'
</programlisting>
    </refsect2>
    <para>
            Symlinks to UNIX special device file that uniquely identifies the port/partition the device
            is plugged into. Example: <literal>/dev/disk/by-path/pci-0000:00:1f.2-scsi-0:0:1:0</literal>
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsSystemInternal"/>The "DeviceIsSystemInternal" property</title>
      <indexterm>
        <primary>DeviceIsSystemInternal</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsSystemInternal'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is considered system internal. Typically, system internal devices
            include non-removable internal hard disks and other drives that are not easily added/removed
            by a local console user. The heuristic typically used is that only devices on removable media
            and devices connected via Firewire, USB, eSATA and SDIO are considered external.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsPartition"/>The "DeviceIsPartition" property</title>
      <indexterm>
        <primary>DeviceIsPartition</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsPartition'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is a partition. See the properties starting with partition- for details.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsPartitionTable"/>The "DeviceIsPartitionTable" property</title>
      <indexterm>
        <primary>DeviceIsPartitionTable</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsPartitionTable'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device contains a partition table. See partition- properties for details.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsRemovable"/>The "DeviceIsRemovable" property</title>
      <indexterm>
        <primary>DeviceIsRemovable</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsRemovable'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device contains removable media.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsMediaAvailable"/>The "DeviceIsMediaAvailable" property</title>
      <indexterm>
        <primary>DeviceIsMediaAvailable</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsMediaAvailable'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if media is available in the device.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsMediaChangeDetected"/>The "DeviceIsMediaChangeDetected" property</title>
      <indexterm>
        <primary>DeviceIsMediaChangeDetected</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsMediaChangeDetected'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if media changes are detected.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsMediaChangeDetectionPolling"/>The "DeviceIsMediaChangeDetectionPolling" property</title>
      <indexterm>
        <primary>DeviceIsMediaChangeDetectionPolling</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsMediaChangeDetectionPolling'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if media changes are detected through the host
            polling the device, e.g. waking up every two seconds to
            revalidate the media. This typically keeps the device in a
            high power state and uses cycles on the CPU. As an
            example, SATA AN capable optical drives does not need
            polling.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsMediaChangeDetectionInhibitable"/>The "DeviceIsMediaChangeDetectionInhibitable" property</title>
      <indexterm>
        <primary>DeviceIsMediaChangeDetectionInhibitable</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsMediaChangeDetectionInhibitable'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if it is possible to inhibit media detection on the device (to avoid keeping the device in a high power state and waking up the host).
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsMediaChangeDetectionInhibited"/>The "DeviceIsMediaChangeDetectionInhibited" property</title>
      <indexterm>
        <primary>DeviceIsMediaChangeDetectionInhibited</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsMediaChangeDetectionInhibited'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if media detection is inhibited (to avoid keeping the device in a high power state and waking up the host).
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsReadOnly"/>The "DeviceIsReadOnly" property</title>
      <indexterm>
        <primary>DeviceIsReadOnly</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsReadOnly'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device read-only.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsDrive"/>The "DeviceIsDrive" property</title>
      <indexterm>
        <primary>DeviceIsDrive</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsDrive'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is a drive.
            See the drive- properties for details.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsOpticalDisc"/>The "DeviceIsOpticalDisc" property</title>
      <indexterm>
        <primary>DeviceIsOpticalDisc</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsOpticalDisc'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is an optical drive and an optical disc is inserted.
            See the optical-disc- properties for details.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsMounted"/>The "DeviceIsMounted" property</title>
      <indexterm>
        <primary>DeviceIsMounted</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsMounted'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is mounted.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceMountPaths"/>The "DeviceMountPaths" property</title>
      <indexterm>
        <primary>DeviceMountPaths</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceMountPaths'read'as'
</programlisting>
    </refsect2>
    <para>
            A list of paths in the root namespace where the root of the device is mounted.
            This property is only valid if
            <link linkend="Device:DeviceIsMounted"><literal>DeviceIsMounted</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceMountedByUid"/>The "DeviceMountedByUid" property</title>
      <indexterm>
        <primary>DeviceMountedByUid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceMountedByUid'read'u'
</programlisting>
    </refsect2>
    <para>
            The UNIX user id of the user who mounted the device. Set to 0 if
            not mounted by udisks.
            This property is only valid if
            <link linkend="Device:DeviceIsMounted"><literal>DeviceIsMounted</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsLuks"/>The "DeviceIsLuks" property</title>
      <indexterm>
        <primary>DeviceIsLuks</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsLuks'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if device is an LUKS encrypted device. See Lucks properties for details.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsLuksCleartext"/>The "DeviceIsLuksCleartext" property</title>
      <indexterm>
        <primary>DeviceIsLuksCleartext</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsLuksCleartext'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if device is a cleartext device backed by a LUKS encrypted device. See LucksCleartext properties for details.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsLinuxMdComponent"/>The "DeviceIsLinuxMdComponent" property</title>
      <indexterm>
        <primary>DeviceIsLinuxMdComponent</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsLinuxMdComponent'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is a Linux md RAID component. See LinuxMdComponent properties for details.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsLinuxMd"/>The "DeviceIsLinuxMd" property</title>
      <indexterm>
        <primary>DeviceIsLinuxMd</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsLinuxMd'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is a Linux md RAID array. See LinuxMd properties for details.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsLinuxLvm2LV"/>The "DeviceIsLinuxLvm2LV" property</title>
      <indexterm>
        <primary>DeviceIsLinuxLvm2LV</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsLinuxLvm2LV'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is a Linux LVM2 logical volume. See LinuxLvm2LV properties for details.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsLinuxLvm2PV"/>The "DeviceIsLinuxLvm2PV" property</title>
      <indexterm>
        <primary>DeviceIsLinuxLvm2PV</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsLinuxLvm2PV'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is a Linux LVM2 physical. See LinuxLvm2PV properties for details.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsLinuxDmmpComponent"/>The "DeviceIsLinuxDmmpComponent" property</title>
      <indexterm>
        <primary>DeviceIsLinuxDmmpComponent</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsLinuxDmmpComponent'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is a component (e.g. active path) of a Linux dm-multipath device.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsLinuxDmmp"/>The "DeviceIsLinuxDmmp" property</title>
      <indexterm>
        <primary>DeviceIsLinuxDmmp</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsLinuxDmmp'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is a Linux dm-multipath device.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceIsLinuxLoop"/>The "DeviceIsLinuxLoop" property</title>
      <indexterm>
        <primary>DeviceIsLinuxLoop</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceIsLinuxLoop'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the device is a Linux loop device.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceSize"/>The "DeviceSize" property</title>
      <indexterm>
        <primary>DeviceSize</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceSize'read't'
</programlisting>
    </refsect2>
    <para>
            The size of the device in bytes.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceBlockSize"/>The "DeviceBlockSize" property</title>
      <indexterm>
        <primary>DeviceBlockSize</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceBlockSize'read't'
</programlisting>
    </refsect2>
    <para>
            The block size of the device in bytes.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DevicePresentationHide"/>The "DevicePresentationHide" property</title>
      <indexterm>
        <primary>DevicePresentationHide</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DevicePresentationHide'read'b'
</programlisting>
    </refsect2>
    <para>
            A hint if the device should be hidden from the user interface.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DevicePresentationNopolicy"/>The "DevicePresentationNopolicy" property</title>
      <indexterm>
        <primary>DevicePresentationNopolicy</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DevicePresentationNopolicy'read'b'
</programlisting>
    </refsect2>
    <para>
            A hint if the device (or e.g. the multi-disk device that the device is
            part of) shouldn't be automatically mounted / assembled.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DevicePresentationName"/>The "DevicePresentationName" property</title>
      <indexterm>
        <primary>DevicePresentationName</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DevicePresentationName'read's'
</programlisting>
    </refsect2>
    <para>
            The name to use when presenting the device to an end user.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DevicePresentationIconName"/>The "DevicePresentationIconName" property</title>
      <indexterm>
        <primary>DevicePresentationIconName</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DevicePresentationIconName'read's'
</programlisting>
    </refsect2>
    <para>
            The icon to use when presenting the device to an end user. If set, must be a name
            following the freedesktop.org icon theme specification.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DeviceAutomountHint"/>The "DeviceAutomountHint" property</title>
      <indexterm>
        <primary>DeviceAutomountHint</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DeviceAutomountHint'read's'
</programlisting>
    </refsect2>
    <para>
            A hint to the desktop that indicates if a device should be automounted.
            Possible values are:
            <para><itemizedlist><listitem><emphasis role="bold">always: </emphasis>Device should always be auto-mounted.</listitem><listitem><emphasis role="bold">never: </emphasis>Device should never be auto-mounted.</listitem></itemizedlist></para>
            An empty string is interpreted to mean that there is no
            hint - the desktop auto-mounter should make its own
            decision of whether to auto-mount the device.
            </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:JobInProgress"/>The "JobInProgress" property</title>
      <indexterm>
        <primary>JobInProgress</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'JobInProgress'read'b'
</programlisting>
    </refsect2>
    <para>
            The job properties specify if a job initiated via the
            udisks daemon is currently in progress.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:JobId"/>The "JobId" property</title>
      <indexterm>
        <primary>JobId</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'JobId'read's'
</programlisting>
    </refsect2>
    <para>
            This property is used to identify the job and maps 1-1
            with the names of the method calls on this interface,
            e.g. 'FilesystemCreate' and so on.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:JobInitiatedByUid"/>The "JobInitiatedByUid" property</title>
      <indexterm>
        <primary>JobInitiatedByUid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'JobInitiatedByUid'read'u'
</programlisting>
    </refsect2>
    <para>
            The UNIX user id of the user who initiated the job.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:JobIsCancellable"/>The "JobIsCancellable" property</title>
      <indexterm>
        <primary>JobIsCancellable</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'JobIsCancellable'read'b'
</programlisting>
    </refsect2>
    <para>
            Whether the job can be cancelled
            using <link linkend="Device.JobCancel"><function>JobCancel()</function></link> method.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:JobPercentage"/>The "JobPercentage" property</title>
      <indexterm>
        <primary>JobPercentage</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'JobPercentage'read'd'
</programlisting>
    </refsect2>
    <para>
            Percentage completed of the job (between 0 and 100, negative if unknown).
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:IdUsage"/>The "IdUsage" property</title>
      <indexterm>
        <primary>IdUsage</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'IdUsage'read's'
</programlisting>
    </refsect2>
    <para>
            A result of probing for signatures on the block device;
            known values are:
            <para><itemizedlist><listitem><emphasis role="bold">filesystem: </emphasis>A mountable file system was detected</listitem><listitem><emphasis role="bold">crypto: </emphasis>Encrypted data (e.g. LUKS) was detected</listitem><listitem><emphasis role="bold">partitiontable: </emphasis>A partition table was detected</listitem><listitem><emphasis role="bold">raid: </emphasis>Used for RAID and LVM components</listitem><listitem><emphasis role="bold">other: </emphasis>A non-standard signature was detected</listitem></itemizedlist></para>
            If blank, no known signature was detected. This doesn't
            necessarily mean the device contains no structured data;
            it only means that no signature known to the probing code
            was detected.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:IdType"/>The "IdType" property</title>
      <indexterm>
        <primary>IdType</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'IdType'read's'
</programlisting>
    </refsect2>
    <para>
            This property contains more information about the result
            of probing the block device. It's value depends of the
            value the
            <link linkend="Device:IdUsage"><literal>IdUsage</literal></link>
            property:
            <para><itemizedlist><listitem><emphasis role="bold">filesystem: </emphasis>The mountable file system that was detected (e.g. <literal>ext3</literal>, <literal>vfat</literal>)</listitem><listitem><emphasis role="bold">crypto: </emphasis>Known values include <literal>crypto_LUKS</literal></listitem><listitem><emphasis role="bold">partitiontable: </emphasis>
                  Known values include
                  <literal>mbr</literal> (for the
                  <ulink url="http://en.wikipedia.org/wiki/Master_Boot_Record">Master Boot Record</ulink>
                  scheme),
                  <literal>gpt</literal> (for the
                  <ulink url="http://en.wikipedia.org/wiki/GUID_Partition_Table">GUID Partition Table</ulink>
                  scheme),
                  <literal>apm</literal> (for the
                  <ulink url="http://en.wikipedia.org/wiki/Apple_Partition_Map">Apple Partition Map</ulink>
                  scheme).
                </listitem><listitem><emphasis role="bold">raid: </emphasis>
                  Known values include
                  <literal>LVM1_member</literal> (for Linux LVM1 components),
                  <literal>LVM2_member</literal> (for Linux LVM2 components),
                  <literal>linux_raid_member</literal> (for Linux md (Software RAID) components)
                </listitem><listitem><emphasis role="bold">other: </emphasis>
                  Known values include
                  <literal>swap</literal> (for swap space),
                  <literal>suspend</literal> (data used when resuming from STD)
                </listitem></itemizedlist></para>
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:IdVersion"/>The "IdVersion" property</title>
      <indexterm>
        <primary>IdVersion</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'IdVersion'read's'
</programlisting>
    </refsect2>
    <para>
            The version of the
            detected file system (or other identified data structure) identified by the
            <link linkend="Device:IdUsage"><literal>IdUsage</literal></link>
            and
            <link linkend="Device:IdType"><literal>IdType</literal></link>
            properties.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:IdUuid"/>The "IdUuid" property</title>
      <indexterm>
        <primary>IdUuid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'IdUuid'read's'
</programlisting>
    </refsect2>
    <para>
            The UUID (universally unique identifier) of the
            detected file system (or other identified data structure) identified by the
            <link linkend="Device:IdUsage"><literal>IdUsage</literal></link>
            and
            <link linkend="Device:IdUsage"><literal>IdType</literal></link>
            properties.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:IdLabel"/>The "IdLabel" property</title>
      <indexterm>
        <primary>IdLabel</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'IdLabel'read's'
</programlisting>
    </refsect2>
    <para>
            The user-visible label of the
            detected file system (or other identified data structure) identified by the
            <link linkend="Device:IdUsage"><literal>IdUsage</literal></link>
            and
            <link linkend="Device:IdUsage"><literal>IdType</literal></link>
            properties.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LuksHolder"/>The "LuksHolder" property</title>
      <indexterm>
        <primary>LuksHolder</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LuksHolder'read'o'
</programlisting>
    </refsect2>
    <para>
            The cleartext device that is using the LUKS device.
            This property is only valid if
            <link linkend="Device:DeviceIsLuksCleartext"><literal>DeviceIsLuks</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LuksCleartextSlave"/>The "LuksCleartextSlave" property</title>
      <indexterm>
        <primary>LuksCleartextSlave</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LuksCleartextSlave'read'o'
</programlisting>
    </refsect2>
    <para>
            The encrypted LUKS device backing a crypto cleartext device.
            This property is only valid if
            <link linkend="Device:DeviceIsLuksCleartext"><literal>DeviceIsLuksCleartext</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LuksCleartextUnlockedByUid"/>The "LuksCleartextUnlockedByUid" property</title>
      <indexterm>
        <primary>LuksCleartextUnlockedByUid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LuksCleartextUnlockedByUid'read'u'
</programlisting>
    </refsect2>
    <para>
            The UNIX user id of the user who unlocked the LUKS device. Set to 0 if
            not unlocked by udisks.
            This property is only valid if
            <link linkend="Device:DeviceIsLuksCleartext"><literal>DeviceIsLuksCleartext</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionSlave"/>The "PartitionSlave" property</title>
      <indexterm>
        <primary>PartitionSlave</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionSlave'read'o'
</programlisting>
    </refsect2>
    <para>
            The object path of the partition table the partition is part of.
            This property is only valid if
            <link linkend="Device:DeviceIsPartition"><literal>DeviceIsPartition</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionScheme"/>The "PartitionScheme" property</title>
      <indexterm>
        <primary>PartitionScheme</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionScheme'read's'
</programlisting>
    </refsect2>
    <para>
            The scheme of the partition table this partition is part of.
            See the <literal>scheme</literal> parameter of the
            <link linkend="Device.PartitionTableCreate"><function>PartitionTableCreate()</function></link> method
            for details on known partitioning schemes.
            This property is only valid if
            <link linkend="Device:DeviceIsPartition"><literal>DeviceIsPartition</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionType"/>The "PartitionType" property</title>
      <indexterm>
        <primary>PartitionType</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionType'read's'
</programlisting>
    </refsect2>
    <para>
            The type of the partition.
            See the <literal>type</literal> parameter of the
            <link linkend="Device.PartitionCreate"><function>PartitionCreate()</function></link> method
            for details on known partitioning types.
            This property is only valid if
            <link linkend="Device:DeviceIsPartition"><literal>DeviceIsPartition</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionLabel"/>The "PartitionLabel" property</title>
      <indexterm>
        <primary>PartitionLabel</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionLabel'read's'
</programlisting>
    </refsect2>
    <para>
            The label of the partition.
            See the <literal>label</literal> parameter of the
            <link linkend="Device.PartitionCreate"><function>PartitionCreate()</function></link> method
            for details on partition labels.
            This property is only valid if
            <link linkend="Device:DeviceIsPartition"><literal>DeviceIsPartition</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionUuid"/>The "PartitionUuid" property</title>
      <indexterm>
        <primary>PartitionUuid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionUuid'read's'
</programlisting>
    </refsect2>
    <para>
            The UUID of the partition.
            See the <literal>uuid</literal> parameter of the
            <link linkend="Device.PartitionCreate"><function>PartitionCreate()</function></link> method
            for details on partition UUID's.
            This property is only valid if
            <link linkend="Device:DeviceIsPartition"><literal>DeviceIsPartition</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionFlags"/>The "PartitionFlags" property</title>
      <indexterm>
        <primary>PartitionFlags</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionFlags'read'as'
</programlisting>
    </refsect2>
    <para>
            Partition flags.
            See the <literal>flags</literal> parameter of the
            <link linkend="Device.PartitionCreate"><function>PartitionCreate()</function></link> method
            for details on partition flags.
            This property is only valid if
            <link linkend="Device:DeviceIsPartition"><literal>DeviceIsPartition</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionNumber"/>The "PartitionNumber" property</title>
      <indexterm>
        <primary>PartitionNumber</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionNumber'read'i'
</programlisting>
    </refsect2>
    <para>
            Number of the partition. Typically partition numbers start at 1 and are identical
            to the numbers used by the kernel. Note that partitions may not be sequentially
            numbered.
            This property is only valid if
            <link linkend="Device:DeviceIsPartition"><literal>DeviceIsPartition</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionOffset"/>The "PartitionOffset" property</title>
      <indexterm>
        <primary>PartitionOffset</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionOffset'read't'
</programlisting>
    </refsect2>
    <para>
            Offset in bytes where the partition is located on the enclosing partition table device (see
            <link linkend="Device:DeviceIsPartition"><literal>PartitionSlave</literal></link>).
            This property is only valid if
            <link linkend="Device:DeviceIsPartition"><literal>DeviceIsPartition</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionSize"/>The "PartitionSize" property</title>
      <indexterm>
        <primary>PartitionSize</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionSize'read't'
</programlisting>
    </refsect2>
    <para>
            Size of the partition in bytes.
            This property is only valid if
            <link linkend="Device:DeviceIsPartition"><literal>DeviceIsPartition</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionAlignmentOffset"/>The "PartitionAlignmentOffset" property</title>
      <indexterm>
        <primary>PartitionAlignmentOffset</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionAlignmentOffset'read't'
</programlisting>
    </refsect2>
    <para>

            The amount of bytes the beginning of the partition is offset
            from the disk's natural alignment.
            This property is only valid if
            <link linkend="Device:DeviceIsPartition"><literal>DeviceIsPartition</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionTableScheme"/>The "PartitionTableScheme" property</title>
      <indexterm>
        <primary>PartitionTableScheme</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionTableScheme'read's'
</programlisting>
    </refsect2>
    <para>
            The scheme of the partition table.
            See the <literal>scheme</literal> parameter of the
            <link linkend="Device.PartitionTableCreate"><function>PartitionTableCreate()</function></link> method
            for details on known partitioning schemes.
            This property is only valid if
            <link linkend="Device:DeviceIsPartitionTable"><literal>DeviceIsPartitionTable</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:PartitionTableCount"/>The "PartitionTableCount" property</title>
      <indexterm>
        <primary>PartitionTableCount</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'PartitionTableCount'read'i'
</programlisting>
    </refsect2>
    <para>
            Number of partitions in the partition table.
            This property is only valid if
            <link linkend="Device:DeviceIsPartitionTable"><literal>DeviceIsPartitionTable</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveVendor"/>The "DriveVendor" property</title>
      <indexterm>
        <primary>DriveVendor</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveVendor'read's'
</programlisting>
    </refsect2>
    <para>
            Name of the vendor of the drive, for example <literal>MATSHITA</literal> or <literal>BELKIN</literal>.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveModel"/>The "DriveModel" property</title>
      <indexterm>
        <primary>DriveModel</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveModel'read's'
</programlisting>
    </refsect2>
    <para>
            Name of the model of the drive, for example <literal>ST910021AS</literal> or <literal>USB 2 HS-CF</literal>.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveRevision"/>The "DriveRevision" property</title>
      <indexterm>
        <primary>DriveRevision</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveRevision'read's'
</programlisting>
    </refsect2>
    <para>
            Revision of the drive, for example <literal>3.07</literal> or <literal>1.95</literal>.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveSerial"/>The "DriveSerial" property</title>
      <indexterm>
        <primary>DriveSerial</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveSerial'read's'
</programlisting>
    </refsect2>
    <para>
            The serial number of the drive or blank if unknown.
            Examples: <literal>3MH05AVA</literal>, <literal>A0000001B900</literal>.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveWwn"/>The "DriveWwn" property</title>
      <indexterm>
        <primary>DriveWwn</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveWwn'read's'
</programlisting>
    </refsect2>
    <para>
            The <ulink url="http://en.wikipedia.org/wiki/World_Wide_Name">World Wide Name</ulink>
            in hex (without a leading "0x") or blank if the drive has no WWN.
            Example: <literal>50014ee0016eb572</literal>.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveRotationRate"/>The "DriveRotationRate" property</title>
      <indexterm>
        <primary>DriveRotationRate</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveRotationRate'read'u'
</programlisting>
    </refsect2>
    <para>
            The rotational rate of the disk (e.g. 4200, 5400, 5900, 7200, 10000, 15000) in rounds
            per minute or 0 if unknown.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE and
            <link linkend="Device:DriveIsRotational"><literal>DriveIsRotational</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveWriteCache"/>The "DriveWriteCache" property</title>
      <indexterm>
        <primary>DriveWriteCache</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveWriteCache'read's'
</programlisting>
    </refsect2>
    <para>
            Whether the write cache is enabled, known values include "enabled" and "disabled" and
            the blank string if unknown.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveConnectionInterface"/>The "DriveConnectionInterface" property</title>
      <indexterm>
        <primary>DriveConnectionInterface</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveConnectionInterface'read's'
</programlisting>
    </refsect2>
    <para>
            The interface through which the drive is connected. Known values include:

            <para><itemizedlist><listitem><emphasis role="bold">virtual: </emphasis>Device is a composite device e.g. Software RAID or similar</listitem><listitem><emphasis role="bold">ata: </emphasis>Connected via ATA</listitem><listitem><emphasis role="bold">ata_serial: </emphasis>Connected via Serial ATA</listitem><listitem><emphasis role="bold">ata_serial_esata: </emphasis>Connected via eSATA</listitem><listitem><emphasis role="bold">ata_parallel: </emphasis>Connected via Parallel ATA</listitem><listitem><emphasis role="bold">scsi: </emphasis>Connected via SCSI</listitem><listitem><emphasis role="bold">usb: </emphasis>Connected via the Universal Serial Bus</listitem><listitem><emphasis role="bold">firewire: </emphasis>Connected via Firewire</listitem><listitem><emphasis role="bold">sdio: </emphasis>Connected via SDIO</listitem><listitem><emphasis role="bold">platform: </emphasis>Part of the platform, e.g. PC floppy drive</listitem></itemizedlist></para>
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveConnectionSpeed"/>The "DriveConnectionSpeed" property</title>
      <indexterm>
        <primary>DriveConnectionSpeed</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveConnectionSpeed'read't'
</programlisting>
    </refsect2>
    <para>
            The nominal speed of the connection interface in bits per
            second. If unknown this property is set to 0.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveMediaCompatibility"/>The "DriveMediaCompatibility" property</title>
      <indexterm>
        <primary>DriveMediaCompatibility</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveMediaCompatibility'read'as'
</programlisting>
    </refsect2>
    <para>
            An array of media types that can be used in the
            drive. This property is sometimes set using quirk files if
            the hardware isn't capable of precisely reporting it.
            Known values include:
            <para><itemizedlist><listitem><emphasis role="bold">flash: </emphasis>Flash Card</listitem><listitem><emphasis role="bold">flash_cf: </emphasis>CompactFlash</listitem><listitem><emphasis role="bold">flash_ms: </emphasis>MemoryStick</listitem><listitem><emphasis role="bold">flash_sm: </emphasis>SmartMedia</listitem><listitem><emphasis role="bold">flash_sd: </emphasis>Secure Digital</listitem><listitem><emphasis role="bold">flash_sdhc: </emphasis>Secure Digital High-Capacity</listitem><listitem><emphasis role="bold">flash_mmc: </emphasis>MultiMediaCard</listitem><listitem><emphasis role="bold">floppy: </emphasis>Floppy Disk</listitem><listitem><emphasis role="bold">floppy_zip: </emphasis>Zip Disk</listitem><listitem><emphasis role="bold">floppy_jaz: </emphasis>Jaz Disk</listitem><listitem><emphasis role="bold">optical: </emphasis>Optical Disc</listitem><listitem><emphasis role="bold">optical_cd: </emphasis>Compact Disc</listitem><listitem><emphasis role="bold">optical_cd_r: </emphasis>Compact Disc Recordable</listitem><listitem><emphasis role="bold">optical_cd_rw: </emphasis>Compact Disc Rewritable</listitem><listitem><emphasis role="bold">optical_dvd: </emphasis>Digital Versatile Disc</listitem><listitem><emphasis role="bold">optical_dvd_r: </emphasis>DVD-R</listitem><listitem><emphasis role="bold">optical_dvd_rw: </emphasis>DVD-RW</listitem><listitem><emphasis role="bold">optical_dvd_ram: </emphasis>DVD-RAM</listitem><listitem><emphasis role="bold">optical_dvd_plus_r: </emphasis>DVD+R</listitem><listitem><emphasis role="bold">optical_dvd_plus_rw: </emphasis>DVD+RW</listitem><listitem><emphasis role="bold">optical_dvd_plus_r_dl: </emphasis>DVD+R Dual Layer</listitem><listitem><emphasis role="bold">optical_dvd_plus_rw_dl: </emphasis>DVD+RW Dual Layer</listitem><listitem><emphasis role="bold">optical_bd: </emphasis>Bluray Disc</listitem><listitem><emphasis role="bold">optical_bd_r: </emphasis>BluRay Recordable</listitem><listitem><emphasis role="bold">optical_bd_re: </emphasis>BluRay Rewritable</listitem><listitem><emphasis role="bold">optical_hddvd: </emphasis>HD DVD</listitem><listitem><emphasis role="bold">optical_hddvd_r: </emphasis>HD DVD Recordable</listitem><listitem><emphasis role="bold">optical_hddvd_rw: </emphasis>HD DVD Rewritable</listitem><listitem><emphasis role="bold">optical_mo: </emphasis>Magneto Optical</listitem><listitem><emphasis role="bold">optical_mrw: </emphasis>Can read Mount Rainer media</listitem><listitem><emphasis role="bold">optical_mrw_w: </emphasis>Can write Mount Rainer media</listitem></itemizedlist></para>
          </para>
    <para>
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveMedia"/>The "DriveMedia" property</title>
      <indexterm>
        <primary>DriveMedia</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveMedia'read's'
</programlisting>
    </refsect2>
    <para>
            The type of media currently in the drive (blank if no media is available). Known
            values include the ones listed for the
            <link linkend="Device:DriveMediaCompatibility"><literal>DriveMediaCompatibility</literal></link>
            property.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveIsMediaEjectable"/>The "DriveIsMediaEjectable" property</title>
      <indexterm>
        <primary>DriveIsMediaEjectable</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveIsMediaEjectable'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE only if the media can be physically ejected by issuing a command
            from the host to the drive (e.g. optical and Zip drives).
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveCanDetach"/>The "DriveCanDetach" property</title>
      <indexterm>
        <primary>DriveCanDetach</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveCanDetach'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE only if the drive is capable of being detached by
            e.g. powering down the port it is connected to.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveCanSpindown"/>The "DriveCanSpindown" property</title>
      <indexterm>
        <primary>DriveCanSpindown</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveCanSpindown'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE only if the drive is capable of being put into
            a standby mode (typically powering down the spindle motor).
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveIsRotational"/>The "DriveIsRotational" property</title>
      <indexterm>
        <primary>DriveIsRotational</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveIsRotational'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the disk uses rotational media, such as a hard disk.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveAdapter"/>The "DriveAdapter" property</title>
      <indexterm>
        <primary>DriveAdapter</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveAdapter'read'o'
</programlisting>
    </refsect2>
    <para>
            The object of the storage adapter for the drive or "/" if no adapter exists.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DrivePorts"/>The "DrivePorts" property</title>
      <indexterm>
        <primary>DrivePorts</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DrivePorts'read'ao'
</programlisting>
    </refsect2>
    <para>
            The object paths of the ports for the drive or empty if no ports exist.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveSimilarDevices"/>The "DriveSimilarDevices" property</title>
      <indexterm>
        <primary>DriveSimilarDevices</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveSimilarDevices'read'ao'
</programlisting>
    </refsect2>
    <para>
            An array of object paths for devices with similar serial number and/or WWN.
            Typically all drives with similar serial number and/or WWN
            are configured as a multipath device (for example via the
            Linux device-mapper target cf.
            <link linkend="Device:DeviceIsLinuxDmmp"><literal>DeviceIsLinuxDmmp</literal></link> and
            <link linkend="Device:DeviceIsLinuxDmmpComponent"><literal>DeviceIsLinuxDmmpComponent</literal></link>)
            but in some cases the OS needs manual configuration.
            Presentation-level software can (and should) display a
            warning when this property is non-empty and the device
            isn't a multipath component or multipath device e.g. when both
            <link linkend="Device:DeviceIsLinuxDmmpComponent"><literal>DeviceIsLinuxDmmpComponent</literal></link>) and
            <link linkend="Device:DeviceIsLinuxDmmp"><literal>DeviceIsLinuxDmmp</literal></link>)
            is FALSE.
            This property is only valid if
            <link linkend="Device:DeviceIsDrive"><literal>DeviceIsDrive</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:OpticalDiscIsBlank"/>The "OpticalDiscIsBlank" property</title>
      <indexterm>
        <primary>OpticalDiscIsBlank</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'OpticalDiscIsBlank'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE only if the disc is appendable.
            This property is only valid if
            <link linkend="Device:DeviceIsOpticalDisc"><literal>DeviceIsOpticalDisc</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:OpticalDiscIsAppendable"/>The "OpticalDiscIsAppendable" property</title>
      <indexterm>
        <primary>OpticalDiscIsAppendable</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'OpticalDiscIsAppendable'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE only if the disc is appendable.
            This property is only valid if
            <link linkend="Device:DeviceIsOpticalDisc"><literal>DeviceIsOpticalDisc</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:OpticalDiscIsClosed"/>The "OpticalDiscIsClosed" property</title>
      <indexterm>
        <primary>OpticalDiscIsClosed</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'OpticalDiscIsClosed'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE only if the disc is appendable.
            This property is only valid if
            <link linkend="Device:DeviceIsOpticalDisc"><literal>DeviceIsOpticalDisc</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:OpticalDiscNumTracks"/>The "OpticalDiscNumTracks" property</title>
      <indexterm>
        <primary>OpticalDiscNumTracks</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'OpticalDiscNumTracks'read'u'
</programlisting>
    </refsect2>
    <para>
            Number of tracks on the disc.
            This property is only valid if
            <link linkend="Device:DeviceIsOpticalDisc"><literal>DeviceIsOpticalDisc</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:OpticalDiscNumAudioTracks"/>The "OpticalDiscNumAudioTracks" property</title>
      <indexterm>
        <primary>OpticalDiscNumAudioTracks</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'OpticalDiscNumAudioTracks'read'u'
</programlisting>
    </refsect2>
    <para>
            Number of audio tracks on the disc.
            This property is only valid if
            <link linkend="Device:DeviceIsOpticalDisc"><literal>DeviceIsOpticalDisc</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:OpticalDiscNumSessions"/>The "OpticalDiscNumSessions" property</title>
      <indexterm>
        <primary>OpticalDiscNumSessions</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'OpticalDiscNumSessions'read'u'
</programlisting>
    </refsect2>
    <para>
            Number of sessions on the disc.
            This property is only valid if
            <link linkend="Device:DeviceIsOpticalDisc"><literal>DeviceIsOpticalDisc</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveAtaSmartIsAvailable"/>The "DriveAtaSmartIsAvailable" property</title>
      <indexterm>
        <primary>DriveAtaSmartIsAvailable</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveAtaSmartIsAvailable'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE if the disk is capable of reporting SMART data, FALSE otherwise.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveAtaSmartTimeCollected"/>The "DriveAtaSmartTimeCollected" property</title>
      <indexterm>
        <primary>DriveAtaSmartTimeCollected</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveAtaSmartTimeCollected'read't'
</programlisting>
    </refsect2>
    <para>
            The point in time (seconds since the Epoch Jan 1, 1970
            0:00 UTC) when ATA SMART data was collected.
            This property is only valid if
            <link linkend="Device:DriveAtaSmartTimeCollected"><literal>DriveAtaSmartTimeCollected</literal></link>
            is greater than zero.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveAtaSmartStatus"/>The "DriveAtaSmartStatus" property</title>
      <indexterm>
        <primary>DriveAtaSmartStatus</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveAtaSmartStatus'read's'
</programlisting>
    </refsect2>
    <para>
            The overall assessment for the disk. Is one of the following strings
            GOOD,
            BAD_ATTRIBUTES_IN_THE_PAST (At least one pre-fail attribute is exceeded its threshold in the past),
            BAD_SECTOR (At least one bad sector),
            BAD_ATTRIBUTE_NOW (At least one pre-fail attribute is exceeding its threshold now),
            BAD_SECTOR_MANY (Many bad sectors)),
            BAD_STATUS (Smart Self Assessment negative)
            or empty if some error occured trying to determine the result.
            This property is only valid if
            <link linkend="Device:DriveAtaSmartTimeCollected"><literal>DriveAtaSmartTimeCollected</literal></link>
            is greater than zero.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:DriveAtaSmartBlob"/>The "DriveAtaSmartBlob" property</title>
      <indexterm>
        <primary>DriveAtaSmartBlob</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'DriveAtaSmartBlob'read'ay'
</programlisting>
    </refsect2>
    <para>
            A blob containing the ATA SMART data. This blob can be used with libatasmart to get
            more information.
            This property is only valid if
            <link linkend="Device:DriveAtaSmartTimeCollected"><literal>DriveAtaSmartTimeCollected</literal></link>
            is greater than zero.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdComponentLevel"/>The "LinuxMdComponentLevel" property</title>
      <indexterm>
        <primary>LinuxMdComponentLevel</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdComponentLevel'read's'
</programlisting>
    </refsect2>
    <para>
            The RAID level of the array the component is part of. Known values include
            <para><itemizedlist><listitem><emphasis role="bold">linear: </emphasis>The array is Just A Bunch of Disks</listitem><listitem><emphasis role="bold">raid0: </emphasis>RAID-0</listitem><listitem><emphasis role="bold">raid1: </emphasis>RAID-1</listitem><listitem><emphasis role="bold">raid4: </emphasis>RAID-4</listitem><listitem><emphasis role="bold">raid5: </emphasis>RAID-5</listitem><listitem><emphasis role="bold">raid6: </emphasis>RAID-6</listitem><listitem><emphasis role="bold">raid10: </emphasis>RAID-10</listitem></itemizedlist></para>
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMdComponent"><literal>DeviceIsLinuxMdComponent</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdComponentPosition"/>The "LinuxMdComponentPosition" property</title>
      <indexterm>
        <primary>LinuxMdComponentPosition</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdComponentPosition'read'i'
</programlisting>
    </refsect2>
    <para>
            The zero-based position of the component or -1 if not part of a running array.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMdComponent"><literal>DeviceIsLinuxMdComponent</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdComponentNumRaidDevices"/>The "LinuxMdComponentNumRaidDevices" property</title>
      <indexterm>
        <primary>LinuxMdComponentNumRaidDevices</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdComponentNumRaidDevices'read'i'
</programlisting>
    </refsect2>
    <para>
            The number of component devices in the array the component is part of.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMdComponent"><literal>DeviceIsLinuxMdComponent</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdComponentUuid"/>The "LinuxMdComponentUuid" property</title>
      <indexterm>
        <primary>LinuxMdComponentUuid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdComponentUuid'read's'
</programlisting>
    </refsect2>
    <para>
            The UUID of the array the component is part of.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMdComponent"><literal>DeviceIsLinuxMdComponent</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdComponentName"/>The "LinuxMdComponentName" property</title>
      <indexterm>
        <primary>LinuxMdComponentName</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdComponentName'read's'
</programlisting>
    </refsect2>
    <para>
            The name of the array the component is part of. Blank if the array
            doesn't have a name (e.g. pre-1.0 meta data).
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMdComponent"><literal>DeviceIsLinuxMdComponent</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdComponentHomeHost"/>The "LinuxMdComponentHomeHost" property</title>
      <indexterm>
        <primary>LinuxMdComponentHomeHost</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdComponentHomeHost'read's'
</programlisting>
    </refsect2>
    <para>
            The home host of the array the component is part of, e.g. where it was created. Blank if the array
            has pre-1.0 meta data.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMdComponent"><literal>DeviceIsLinuxMdComponent</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdComponentVersion"/>The "LinuxMdComponentVersion" property</title>
      <indexterm>
        <primary>LinuxMdComponentVersion</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdComponentVersion'read's'
</programlisting>
    </refsect2>
    <para>
            The version of superblock of the component.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMdComponent"><literal>DeviceIsLinuxMdComponent</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdComponentHolder"/>The "LinuxMdComponentHolder" property</title>
      <indexterm>
        <primary>LinuxMdComponentHolder</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdComponentHolder'read'o'
</programlisting>
    </refsect2>
    <para>
            The holder of the component or "/" if the component isn't claimed by any array.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMdComponent"><literal>DeviceIsLinuxMdComponent</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdComponentState"/>The "LinuxMdComponentState" property</title>
      <indexterm>
        <primary>LinuxMdComponentState</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdComponentState'read'as'
</programlisting>
    </refsect2>
    <para>
            The state of the component (contents of md/dev-XXX/state file).
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMdComponent"><literal>DeviceIsLinuxMdComponent</literal></link>
            is TRUE and
            <link linkend="Device:DeviceIsLinuxMdComponentHolder"><literal>DeviceIsLinuxMdComponentHolder</literal></link>
            is non-empty.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdState"/>The "LinuxMdState" property</title>
      <indexterm>
        <primary>LinuxMdState</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdState'read's'
</programlisting>
    </refsect2>
    <para>
            The state of the array (contents of the md/array_state file).
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdLevel"/>The "LinuxMdLevel" property</title>
      <indexterm>
        <primary>LinuxMdLevel</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdLevel'read's'
</programlisting>
    </refsect2>
    <para>
            The RAID level of the array. For known values see the
            <link linkend="Device:LinuxMdComponentLevel"><literal>LinuxMdComponentLevel</literal></link>
            property.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdUuid"/>The "LinuxMdUuid" property</title>
      <indexterm>
        <primary>LinuxMdUuid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdUuid'read's'
</programlisting>
    </refsect2>
    <para>
            The UUID of the array.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdHomeHost"/>The "LinuxMdHomeHost" property</title>
      <indexterm>
        <primary>LinuxMdHomeHost</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdHomeHost'read's'
</programlisting>
    </refsect2>
    <para>
            The home host of the array, e.g. where if was created. Blank if the array
            has pre-1.0 meta data.
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdName"/>The "LinuxMdName" property</title>
      <indexterm>
        <primary>LinuxMdName</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdName'read's'
</programlisting>
    </refsect2>
    <para>
            The name of the array. Blank if the array
            doesn't have a name (e.g. pre-1.0 meta data).
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdNumRaidDevices"/>The "LinuxMdNumRaidDevices" property</title>
      <indexterm>
        <primary>LinuxMdNumRaidDevices</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdNumRaidDevices'read'i'
</programlisting>
    </refsect2>
    <para>
            Number of component devices in the array.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdVersion"/>The "LinuxMdVersion" property</title>
      <indexterm>
        <primary>LinuxMdVersion</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdVersion'read's'
</programlisting>
    </refsect2>
    <para>
            Metadata version used in the components.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdSlaves"/>The "LinuxMdSlaves" property</title>
      <indexterm>
        <primary>LinuxMdSlaves</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdSlaves'read'ao'
</programlisting>
    </refsect2>
    <para>
            An array of object paths for components currently part of the array.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdIsDegraded"/>The "LinuxMdIsDegraded" property</title>
      <indexterm>
        <primary>LinuxMdIsDegraded</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdIsDegraded'read'b'
</programlisting>
    </refsect2>
    <para>
            TRUE only if the array is running in degraded mode.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdSyncAction"/>The "LinuxMdSyncAction" property</title>
      <indexterm>
        <primary>LinuxMdSyncAction</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdSyncAction'read's'
</programlisting>
    </refsect2>
    <para>
            The operation currently pending on the array. Known values
            include
            <para><itemizedlist><listitem><emphasis role="bold">idle: </emphasis>No operation is pending</listitem><listitem><emphasis role="bold">reshape: </emphasis>A reshape is in progress</listitem><listitem><emphasis role="bold">resync: </emphasis>Redudancy is being calculated</listitem><listitem><emphasis role="bold">repair: </emphasis>A repair operation is in progress</listitem><listitem><emphasis role="bold">recover: </emphasis>A hot spare is being built to replace a failed/missing device</listitem></itemizedlist></para>
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdSyncPercentage"/>The "LinuxMdSyncPercentage" property</title>
      <indexterm>
        <primary>LinuxMdSyncPercentage</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdSyncPercentage'read'd'
</programlisting>
    </refsect2>
    <para>
            The progress of the current sync operation.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE and the value of the property
            <link linkend="Device:LinuxMdSyncAction"><literal>LinuxMdSyncAction</literal></link>
            is not <literal>idle</literal>.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxMdSyncSpeed"/>The "LinuxMdSyncSpeed" property</title>
      <indexterm>
        <primary>LinuxMdSyncSpeed</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxMdSyncSpeed'read't'
</programlisting>
    </refsect2>
    <para>
            The speed of the sync operation in bytes per second.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxMd"><literal>DeviceIsLinuxMd</literal></link>
            is TRUE and the value of the property
            <link linkend="Device:LinuxMdSyncAction"><literal>LinuxMdSyncAction</literal></link>
            is not <literal>idle</literal>.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2PVUuid"/>The "LinuxLvm2PVUuid" property</title>
      <indexterm>
        <primary>LinuxLvm2PVUuid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2PVUuid'read's'
</programlisting>
    </refsect2>
    <para>
            The UUID of the PV.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2PV"><literal>DeviceIsLinuxLvm2PV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2PVNumMetadataAreas"/>The "LinuxLvm2PVNumMetadataAreas" property</title>
      <indexterm>
        <primary>LinuxLvm2PVNumMetadataAreas</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2PVNumMetadataAreas'read'u'
</programlisting>
    </refsect2>
    <para>
            The number of metadata areas on the PV.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2PV"><literal>DeviceIsLinuxLvm2PV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2PVGroupName"/>The "LinuxLvm2PVGroupName" property</title>
      <indexterm>
        <primary>LinuxLvm2PVGroupName</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2PVGroupName'read's'
</programlisting>
    </refsect2>
    <para>
            The name of the volume group (that this physical volume belongs to).
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2PV"><literal>DeviceIsLinuxLvm2PV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2PVGroupUuid"/>The "LinuxLvm2PVGroupUuid" property</title>
      <indexterm>
        <primary>LinuxLvm2PVGroupUuid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2PVGroupUuid'read's'
</programlisting>
    </refsect2>
    <para>
            The UUID of the volume group (that this physical volume belongs to).
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2PV"><literal>DeviceIsLinuxLvm2PV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2PVGroupSize"/>The "LinuxLvm2PVGroupSize" property</title>
      <indexterm>
        <primary>LinuxLvm2PVGroupSize</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2PVGroupSize'read't'
</programlisting>
    </refsect2>
    <para>
            The size of the volume group (that this physical volume belongs to) in bytes.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2PV"><literal>DeviceIsLinuxLvm2PV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2PVGroupUnallocatedSize"/>The "LinuxLvm2PVGroupUnallocatedSize" property</title>
      <indexterm>
        <primary>LinuxLvm2PVGroupUnallocatedSize</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2PVGroupUnallocatedSize'read't'
</programlisting>
    </refsect2>
    <para>
            The unallocated size of the volume group (that this physical volume belongs to) in bytes.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2PV"><literal>DeviceIsLinuxLvm2PV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2PVGroupSequenceNumber"/>The "LinuxLvm2PVGroupSequenceNumber" property</title>
      <indexterm>
        <primary>LinuxLvm2PVGroupSequenceNumber</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2PVGroupSequenceNumber'read't'
</programlisting>
    </refsect2>
    <para>
            The sequence number for the volume group (that this physical volume belongs to).
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2PV"><literal>DeviceIsLinuxLvm2PV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2PVGroupExtentSize"/>The "LinuxLvm2PVGroupExtentSize" property</title>
      <indexterm>
        <primary>LinuxLvm2PVGroupExtentSize</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2PVGroupExtentSize'read't'
</programlisting>
    </refsect2>
    <para>
            The extent size for the volume group (that this physical volume belongs to) in bytes.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2PV"><literal>DeviceIsLinuxLvm2PV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2PVGroupPhysicalVolumes"/>The "LinuxLvm2PVGroupPhysicalVolumes" property</title>
      <indexterm>
        <primary>LinuxLvm2PVGroupPhysicalVolumes</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2PVGroupPhysicalVolumes'read'as'
</programlisting>
    </refsect2>
    <para>
            The physical volumes that belongs to the volume group (that this physical volume belongs to).
            Each element is a semicolon separated list of key/value pairs. The only known key/value
            type as this point is uuid for the UUID of the physical volume.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2PV"><literal>DeviceIsLinuxLvm2PV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2PVGroupLogicalVolumes"/>The "LinuxLvm2PVGroupLogicalVolumes" property</title>
      <indexterm>
        <primary>LinuxLvm2PVGroupLogicalVolumes</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2PVGroupLogicalVolumes'read'as'
</programlisting>
    </refsect2>
    <para>
            The logical volumes that belongs to the volume group (that this physical volume belongs to).
            Each element is a semicolon separated list of key/value pairs. The only known key/value
            types as this point are
            uuid (for the UUID of the logical volume),
            name (for the name of the logical volume),
            size (for the size of the logical volume) and
            active (whether the logical volume is active).
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2PV"><literal>DeviceIsLinuxLvm2PV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2LVName"/>The "LinuxLvm2LVName" property</title>
      <indexterm>
        <primary>LinuxLvm2LVName</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2LVName'read's'
</programlisting>
    </refsect2>
    <para>
            The name of the logical volume.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2LV"><literal>DeviceIsLinuxLvm2LV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2LVUuid"/>The "LinuxLvm2LVUuid" property</title>
      <indexterm>
        <primary>LinuxLvm2LVUuid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2LVUuid'read's'
</programlisting>
    </refsect2>
    <para>
            The UUID of the logical volume.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2LV"><literal>DeviceIsLinuxLvm2LV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2LVGroupName"/>The "LinuxLvm2LVGroupName" property</title>
      <indexterm>
        <primary>LinuxLvm2LVGroupName</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2LVGroupName'read's'
</programlisting>
    </refsect2>
    <para>
            The name of volume group the logical volume belongs to.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2LV"><literal>DeviceIsLinuxLvm2LV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLvm2LVGroupUuid"/>The "LinuxLvm2LVGroupUuid" property</title>
      <indexterm>
        <primary>LinuxLvm2LVGroupUuid</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLvm2LVGroupUuid'read's'
</programlisting>
    </refsect2>
    <para>
            The UUID of the volume group the logical volume belongs to.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLvm2LV"><literal>DeviceIsLinuxLvm2LV</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxDmmpComponentHolder"/>The "LinuxDmmpComponentHolder" property</title>
      <indexterm>
        <primary>LinuxDmmpComponentHolder</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxDmmpComponentHolder'read'o'
</programlisting>
    </refsect2>
    <para>
            The object path of the multi-path device the component is currently part of.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxDmmpComponent"><literal>DeviceIsLinuxDmmpComponent</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxDmmpName"/>The "LinuxDmmpName" property</title>
      <indexterm>
        <primary>LinuxDmmpName</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxDmmpName'read's'
</programlisting>
    </refsect2>
    <para>
            The symbolic name for the multipath device, e.g. <literal>mpathb</literal>.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxDmmp"><literal>DeviceIsLinuxDmmp</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxDmmpSlaves"/>The "LinuxDmmpSlaves" property</title>
      <indexterm>
        <primary>LinuxDmmpSlaves</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxDmmpSlaves'read'ao'
</programlisting>
    </refsect2>
    <para>
            The object paths of currently active component devices, e.g. paths.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxDmmp"><literal>DeviceIsLinuxDmmp</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxDmmpParameters"/>The "LinuxDmmpParameters" property</title>
      <indexterm>
        <primary>LinuxDmmpParameters</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxDmmpParameters'read's'
</programlisting>
    </refsect2>
    <para>
            The parameters/configuration for the multipath device.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxDmmp"><literal>DeviceIsLinuxDmmp</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
    <refsect2>
      <title><anchor role="function" id="Device:LinuxLoopFilename"/>The "LinuxLoopFilename" property</title>
      <indexterm>
        <primary>LinuxLoopFilename</primary>
        <secondary>Device</secondary>
      </indexterm>
      <programlisting>'LinuxLoopFilename'read's'
</programlisting>
    </refsect2>
    <para>
            The file backing the loop device.
            This property is only valid if
            <link linkend="Device:DeviceIsLinuxLoop"><literal>DeviceIsLinuxLoop</literal></link>
            is TRUE.
      </para>
    <variablelist role="params"/>
  </refsect1>
</refentry>
